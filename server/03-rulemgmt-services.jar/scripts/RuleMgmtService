import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID;
import com.rameses.util.*;
import com.rameses.io.*;

/**
   To hook custom rules, create an appropriate interceptor and add the ff. pattern in the sample below
   @After( pattern="RuleMgmtService.buildRuleText.*", eval="#{args[0].ruleset=='customassessment'}")
   public def buildRuleText( def evt ) {
		def rule = evt.args[0];
	    rule.ruletext = //your custom rule builder.
   }
**/
class RuleMgmtService {

	@PersistenceContext('system')
	def em
	
	@Service("RuleBuilderService")
	def ruleBuilder;
	
	@Resource('RuleService')
	def ruleSvc; 
	
	def DRAFT_STATE = 'DRAFT'
	def DEPLOYED_STATE = 'DEPLOYED'
	def APPROVED_STATE = 'APPROVED' 
	
	def SCHEMA_NAME = "rule";
	
	@ProxyMethod
	public def getList( params ) {
		if( !params?.ruleset )
			throw new Exception("Please indicate ruleset in RuleService.getList" );
		if( !params._start ) params._start = 0;
		if( !params._limit ) params._limit = 50;
		
		def vars = [filter: '']
		if( params.docstate ) vars.filter = ' and docstate=$P{docstate} ';
		
		String sql = 'rule:list';
		if( params.searchText) {
			sql = 'rule:list-byname';
			params.name = params.searchText+'%';
		}
		
		return em.sqlContext.createNamedQuery(sql)
					.setVars(vars)
					.setParameters( params )
					.setFirstResult( params._start )
					.setMaxResults( params._limit )
					.resultList
	}
	
	@ProxyMethod
	public def open( def o ) {
		return em.read( SCHEMA_NAME, o )
	}
	
	
	@ProxyMethod
	public def create( rule ) {
		rule.rulename = rule.rulename.replaceAll('\\W', '_');
		rule.objid = rule.rulename;
		rule.docstate = DRAFT_STATE
		rule.packagename = rule.ruleset + "." + rule.rulename;
		rule.author = "guest";	
		em.validate(SCHEMA_NAME, rule );
		
		def data = em.sqlContext.createNamedQuery('rule:check-duplicate').setParameters( rule ).singleResult 
		if( data ) throw new Exception('Rule ' + rule.rulename + ' already exists.' )

		em.create( SCHEMA_NAME, rule );
		return rule; 
	}
	
	@ProxyMethod
	public def update( def rule ) {
		em.validate(SCHEMA_NAME, rule )
		em.update( SCHEMA_NAME, rule)
		return rule
	}
	
	@ProxyMethod
	public void removeEntity( params ) {
		def rule = open( params );
		if ( ! rule ) return // probably deleted already 

		if ( rule.docstate != DRAFT_STATE ) throw new Exception('Only rules in Draft state can be deleted.')
		em.delete(SCHEMA_NAME, rule)
	}
	
	@ProxyMethod
	public def deploy( def o ) {
		def rule = em.read( SCHEMA_NAME, [objid: o.objid] );
		if( rule.docstate == DEPLOYED_STATE)
			throw new Exception("Rule " + o.objid +  " is already deployed. ");
		if(!rule) 
			throw new Exception("Rule " + o.objid +  " not found ");
			
		String ruletext = ruleBuilder.buildRuleText(rule);		
			
		if( !ruletext ) throw new Exception('Rule text must be implemented.');
		try 
		{
			//add also in db deploy
			def mrule = [
				ruleset: rule.ruleset,
				rulegroup: rule.agendagroup,
				packagename: rule.packagename,
				content: ruletext
			]
			em.sqlContext.createNamedExecutor( 'rulemgmt:add-rule-package' ).setParameters( mrule ).execute();
			String s = "package " + rule.packagename + "\n" + ruletext;
			ruleSvc.addRulePackage( rule.ruleset, new java.io.StringReader(s) );
		}
		catch(e) {
			println "\n---- debug ---------"
			println ruletext
			println "--------------------"
			throw e;
		}
		rule.docstate = DEPLOYED_STATE;
		em.update( SCHEMA_NAME, rule );
		return rule; 
	}
	
	@ProxyMethod
	public def undeploy( def o ) {
		def rule = em.read(SCHEMA_NAME, o );
		rule.docstate = DRAFT_STATE
		em.update( SCHEMA_NAME, rule );
		def mrule = [
			ruleset: rule.ruleset,
			packagename: rule.packagename,
			rulegroup: rule.agendagroup
		];
		em.sqlContext.createNamedExecutor( 'rulemgmt:remove-rule-package' ).setParameters( mrule ).execute();	 
		ruleSvc.removeRulePackage( rule.ruleset,  rule.packagename );
		return rule 
	}
	
	@ProxyMethod
	public def supersede( def o ) {
		throw new Exception("supersede is not yet supported");
	}
}

