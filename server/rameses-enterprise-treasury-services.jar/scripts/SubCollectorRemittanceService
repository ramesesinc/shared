import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class SubCollectorRemittanceService  {

	@ActiveDB("subcollector_remittance")
	def em; 

	@Service("DateService")
	def dateSvc;

	@Service("SequenceService")
	def seqSvc;

	@Env
	def env;

	@ProxyMethod
	public def getCollectorList() {
		return em.getCollectors( subcollectorid: env.USERID );
	}

	@ProxyMethod 
	public def getItems(entity) {
		return em.getItemsRemittance(entity)	
	}

	@ProxyMethod
	public def open( entity ) {
		entity = em.read(entity)	
		entity.items = getItems(entity)
		return entity 
	}


	@ProxyMethod
	public def getUremittedCollections(def p) {
		p.subcollector = [objid:env.USERID, name:env.USER];
		if(!p.collector) {
			p.items = [];
			p.checksum = [:];
			p.amount = 0;
		}
		else {
			def params = [collectorid:p.collector.objid, subcollectorid:p.subcollector.objid ];
			p.items = em.getUremittedCollectionSummary( params );
			p.checksum = em.findSummaryTotals( params );
			p.amount = (p.checksum.amount == null ? 0.0 : p.checksum.amount);
			p.totalnoncash = (p.checksum.totalnoncash == null ? 0.0 : p.checksum.totalnoncash);
			p.totalcash = p.amount - p.totalnoncash
		}
		return p;
	}

	@ProxyMethod 
	public def getCheckPaymentsByRemittanceid(params) {
		return em.getCheckPaymentByRemittanceId( params );
	}

	@ProxyMethod 
	public def getCheckPaymentsBySubcollector(params ) {
		params.subcollectorid = env.USERID 
		return em.getCheckPaymentBySubcollector( params )
	}


	@ProxyMethod
	public def post(def p) {
		def params = [
			collectorid:p.collector.objid, 
			subcollectorid:p.subcollector.objid,
			remittanceid: p.objid 
		];
		def ctest = em.findSummaryTotals( params );
		def chksum = p.checksum;
		if( chksum != ctest )
			throw new Exception("Changes have been made prior to posting. Please redo transaction");

		def txncode = "SUBREM";	
		p.txnno = txncode + seqSvc.getNextFormattedSeries(txncode);	
		p.txndate = dateSvc.serverDate;	
		p.dtposted = dateSvc.serverDate;	
		p.state = "OPEN";
		p.collectionsummaries = getCollectionSummaries(params)
		em.create(p);	
		em.collectReceipts(params);
		em.updateCashReceiptState(params);
		return p;
	}


	@ProxyMethod
	public def getCollectionSummaries( params ) {
		return em.getCollectionSummaries(params).each{
			//calculate qtys
			it.qtyreceived = (it.receivedendseries - it.receivedstartseries + 1) + ''
			if (it.issuedstartseries != null){
				it.qtyissued = (it.issuedendseries - it.issuedstartseries + 1) + ''
			}
			it.qtyending = (it.endingendseries - it.endingstartseries + 1) + ''
		}	
	}

	@ProxyMethod
	public def generateDCR(objid) {
		def entity = open([objid:objid])
		entity.cashbreakdown.each{
			it.qty = it.qty.toString()
		}
		entity.collectionsummaries.each{
			it.receivedstartseries = it.receivedstartseries.toString()
			it.receivedendseries = it.receivedendseries.toString()

			it.issuedstartseries = ( it.issuedstartseries == null ? null : it.issuedstartseries.toString() )
			it.issuedendseries = ( it.issuedendseries == null ? null : it.issuedendseries.toString() )

			it.endingstartseries = it.endingstartseries.toString()
			it.endingendseries = it.endingendseries.toString()
		}
		return entity 
	}

}