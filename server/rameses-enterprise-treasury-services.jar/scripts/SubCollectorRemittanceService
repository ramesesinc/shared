import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class SubCollectorRemittanceService  {

	@ActiveDB("subcollector_remittance")
	def em; 

	@Service("DateService")
	def dateSvc;

	@Service("SequenceService")
	def seqSvc;

	@Env
	def env;

	@ProxyMethod
	public def getCollectorList() {
		return em.getCollectors( subcollectorid: env.USERID );
	}

	@ProxyMethod 
	public def getItems(entity) {
		return em.getItemsRemittance(entity)	
	}


	@ProxyMethod
	public def getUremittedCollections(def p) {
		p.subcollector = [objid:env.USERID, name:env.USER];
		if(!p.collector) {
			p.items = [];
			p.checksum = [:];
			p.amount = 0;
		}
		else {
			def params = [collectorid:p.collector.objid, subcollectorid:p.subcollector.objid ];
			p.items = em.getUremittedCollectionSummary( params );
			p.checksum = em.findSummaryTotals( params );
			p.amount = p.checksum.amount;
		}
		return p;
	}

	@ProxyMethod 
	public def getCheckPaymentsByRemittanceid(params) {
		return em.getCheckPaymentByRemittanceId( params );
	}

	@ProxyMethod 
	public def getCheckPaymentsBySubcollector(params ) {
		params.subcollectorid = env.USERID 
		return em.getCheckPaymentBySubcollector( params )
	}


	@ProxyMethod
	public def post(def p) {
		def params = [
			collectorid:p.collector.objid, 
			subcollectorid:p.subcollector.objid,
			remittanceid: p.objid 
		];
		def ctest = em.findSummaryTotals( params );
		def chksum = p.checksum;
		if( chksum != ctest )
			throw new Exception("Changes have been made prior to posting. Please redo transaction");

		def txncode = "SUBREM";	
		p.txnno = txncode + seqSvc.getNextFormattedSeries(txncode);	
		p.txndate = dateSvc.serverDate;	
		p.dtposted = dateSvc.serverDate;	
		p.state = "OPEN";

		em.create(p);	
		em.collectReceipts(params);
		em.updateCashReceiptState(params);
		return p;
	}

}