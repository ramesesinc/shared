import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class BankDepositService  {

	
	@PersistenceContext("main")
	def em; 

	@Env
	def env;

	@Service("SequenceService")
	def seqSvc;

	@Service("DateService")
	def dateSvc;

	@Service("BankAccountPostService")
	def bankBook;

	@Service("CashBookPostService")
	def cashBook;

	@ProxyMethod
	public def init() {
		def list = em.sqlContext.createNamedQuery("bankdeposit:getUndeposited")
			.setParameters( [cashierid: env.USERID]).resultList;
		
		if(!list)
			throw new Exception("No pending transactions to deposit");

		def o = [objid: "DEP"+new UID()];	
		o.liquidations = list;
		o.fundsummary = em.sqlContext.createNamedQuery("bankdeposit:getUndepositedByFund")
			.setParameters( [cashierid: env.USERID]).resultList;
		o.fundsummary.each {
			it.allocated = 0;
			it.balance = it.amount;
		}	
		o.deposits = [];
		o.undepositedChecks = em.sqlContext.createNamedQuery("bankdeposit:getUndepositedChecks")
			.setParameters( [cashierid: env.USERID]).resultList;
		return o;
	}

	@ProxyMethod
	public def getUndepositedChecks( o ) {
		return [
			[checkno: '12345', particulars: 'mamix', amount: 250.00 ]
		];
	}


	@ProxyMethod
	public def post( def o ) {
		
		def z = em.sqlContext.createNamedQuery("cashier:getUserTxnCode")
			.setParameters( [userid: env.USERID]).singleResult;

		def txncode = "DEP";	
		if(z?.usertxncode) txncode = z.usertxncode; 	

		o.txnno = txncode + seqSvc.getNextFormattedSeries(txncode);
		o.dtposted = dateSvc.serverDate;
		o.cashier = [ objid:env.USERID, name:env.FULLNAME, title:env.JOBTITLE ];
		o.totalcash = o.deposits.sum{it.totalcash};
		o.totalnoncash = o.deposits.sum{it.totalnoncash};
		o.amount = o.totalcash+o.totalnoncash;
		em.create("bankdeposit", o);

		for( x in o.liquidations ) {
			def m = [:];	
			m.objid = x.objid;
			m.bankdepositid = o.objid;	
			em.create("bankdeposit:liquidation", m);
		}

		for( x in o.deposits ) {
			x.objid = "BNKDEPENTRY"+new UID();
			x.parentid = o.objid;
			em.create("bankdeposit:entry", x);
			x.checks.each { c->
				c.parentid = x.objid;
				em.create("bankdeposit:entry_check", c);
			}
		}

		//credit cashbook of liquidating officer (Treasury)
		for( x in o.liquidations ) {
			def m = [:];
			m.subacctid = x.liquidatingofficer.objid;
			m.fundid = x.fund.objid;
			m.refid = o.objid;
			m.refno = o.txnno;
			m.refdate = o.dtposted;
			m.reftype = "DEPOSIT";
			m.amount = x.amount;
			m.particulars = "DEPOSITED BY " + env.FULLNAME;
			cashBook.postCR( m );
		}
		//debit bank
		for( x in o.deposits) {
			def m = [:];
			m.objid = x.bankaccount.objid;
			m.refid = o.objid;
			m.refno = o.txnno;
			m.refdate = o.dtposted;
			m.reftype = "DEPOSIT";
			m.amount = x.amount;
			m.particulars = "DEPOSITED BY " + env.FULLNAME;
			bankBook.postDR( m );
		}
		return o;

	}


	@ProxyMethod
	public def open( deposit ) {
		deposit = em.read('bankdeposit', deposit)	
		deposit.fundsummary = em.sqlContext.createNamedQuery('bankdeposit:getFundSummaries')
				.setParameters(deposit).resultList
		deposit.deposits = em.sqlContext.createNamedQuery('bankdeposit:getDepositSummaries')
				.setParameters(deposit).resultList
		deposit.liquidations = em.sqlContext.createNamedQuery('bankdeposit:getPostedLiquidations')
				.setParameters(deposit).resultList
		return deposit
	}

}