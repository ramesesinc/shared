import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class BankDepositService  {

	@ActiveDB('bankdeposit')
	def adb 

	@PersistenceContext("main")
	def em; 

	@Env
	def env;

	@Service("SequenceService")
	def seqSvc;

	@Service("DateService")
	def dateSvc;

	@Service("BankAccountPostService")
	def bankBook;

	@Service("CashBookPostService")
	def cashBook;

	@Service('Var')
	def var

	@ProxyMethod
	public def init() {
		def list = em.sqlContext.createNamedQuery("bankdeposit:getUndepositedLiquidation")
			.setParameters( [cashierid: env.USERID]).resultList.each { it.selected = true };
		
		if(!list)
			throw new Exception("No pending transactions to deposit");

		def o = [objid: "DEP"+new UID()];	
		o.liquidations = list;
		o.deposits = [];
		o.dtposted = dateSvc.serverDate;
		o.cashier = [ objid:env.USERID, name:env.FULLNAME, title:env.JOBTITLE ];
		o.depositbyaccount = var.getProperty("deposit_collection_by_bank_account", '0').toString().equals('1')
		return o
	} 
	
	@ProxyMethod 
	public def process( params ) {
		def o = [:]	
		o.fundsummaries = adb.getUndepositedByFund(params)
		o.fundsummaries.each {
			it.allocated = 0;
			it.balance = it.amount;
			it.bankaccounts = adb.getBankAccountsByFund(it.fund)
		}	
		
		o.undepositedChecks = adb.getUndepositedChecks(params)
		return o;
	}

	@ProxyMethod
	public def getUndepositedChecks( o ) {
		return [
			[checkno: '12345', particulars: 'mamix', amount: 250.00 ]
		];
	}


	@ProxyMethod
	public def post( def o ) {

		if(o.undepositedChecks) 
			throw new Exception("There are still undeposited non-cash payment. Please verify. ")

		def txncode = "DEP";	
		if(env.TXNCODE) txncode = env.TXNCODE; 	

		o.txnno = txncode + seqSvc.getNextFormattedSeries(txncode);
		o.totalcash = o.deposits.sum{it.totalcash};
		o.totalnoncash = o.deposits.sum{it.totalnoncash};
		o.amount = o.totalcash+o.totalnoncash;
		em.create("bankdeposit", o);

		def liquidationfunds = adb.getUndeposited( [liquidationids: "'" + o.liquidations.objid.join("','") + "'"  ] )	

		for( x in liquidationfunds ) {
			def m = [:];	
			m.objid = x.objid;
			m.bankdepositid = o.objid;	
			em.create("bankdeposit:liquidation", m);
		}

		for( x in o.deposits ) {
			x.objid = "BNKDEPENTRY"+new UID();
			x.parentid = o.objid;
			em.create("bankdeposit:entry", x);
			x.checks.each { c->
				c.parentid = x.objid;
				em.create("bankdeposit:entry_check", c);
			}
		}

		//debit cashbook of cashier (Treasury)
		for( x in o.deposits ) {
			def m = [:];
			m.subacctid = o.cashier.objid;
			def fund = adb.findFundByBankEntryId(x)
			m.fundid = fund?.objid 
			m.fundtitle = fund?.title 
			m.type = 'CASHIER'
			m.refid = x.objid;
			m.refno = o.txnno + '-' + fund?.title;
			m.refdate = o.dtposted;
			m.reftype = "DEPOSIT";
			m.amount = x.amount;
			m.particulars = "DEPOSITED BY " + env.FULLNAME;
			cashBook.postDR( m );
		}
		//credit cashbook of liquidating officer (Treasury)
		for( x in liquidationfunds ) {
			def m = [:];
			m.subacctid = x.liquidatingofficer.objid;
			m.fundid = x.fund.objid;
			m.fundtitle = x.fund.title;
			m.type = 'LIQUIDATING_OFFICER'
			m.refid = o.objid;
			m.refno = o.txnno;
			m.refdate = o.dtposted;
			m.reftype = "DEPOSIT";
			m.amount = x.amount;
			m.particulars = "DEPOSITED BY " + env.FULLNAME;
			cashBook.postCR( m );
		}
		//debit bank
		for( x in o.deposits) {
			def m = [:];
			m.objid = x.bankaccount.objid;
			m.refid = o.objid;
			m.refno = o.txnno;
			m.refdate = o.dtposted;
			m.reftype = "DEPOSIT";
			m.amount = x.amount;
			m.particulars = "DEPOSITED BY " + env.FULLNAME;
			bankBook.postDR( m );
		}
		o.deposits = loadDepositEntry( o )
		return o;

	}


	@ProxyMethod
	public def open( deposit ) {
		deposit = em.read('bankdeposit', deposit)	
		deposit.fundsummaries = em.sqlContext.createNamedQuery('bankdeposit:getFundSummaries')
				.setParameters(deposit).resultList
		deposit.deposits = loadDepositEntry( deposit )
		deposit.liquidations = em.sqlContext.createNamedQuery('bankdeposit:getPostedLiquidations')
				.setParameters(deposit).resultList
		return deposit
	}

	private def loadDepositEntry( deposit )
	{
		return em.sqlContext.createNamedQuery('bankdeposit:getDepositSummaries')
				.setParameters(deposit).resultList.each {
						it.checks = em.sqlContext.createNamedQuery('bankdeposit:getDepositedChecks').setParameters(it).resultList
						it.cashbreakdown = em.serializer.read( it.cashbreakdown ).each { it.qty = it.qty.toString() }
					}
	}

}
