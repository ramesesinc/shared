import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*;
import com.rameses.services.extended.*;


class StatementOfRevenueService  
{

	@ActiveDB('statementofrevenue')
	def db 

	@PersistenceContext("main")
	def em; 

	@Service('RPTUtil')
	def util

	@Service('DateService')
	def dtSvc 

	def PADDING_SIZE = 10

	@Service('NumberService')
	def numSvc


	@ProxyMethod
	public def generateReport( params ) {
		util.required('Chart Type', params.charttype)	//charttype values: ngas, sre
		util.required('Year', params.year)
		util.required('Qtr', params.qtr)				//values : 1,2,3,4
		//
		// parameters month and day are optional
		//

		buildDateFilter(params)
		def items = getSummarizedRevenueItems(params)
		if(! items ) throw new Exception("No record(s) found.               ");

		def reportdata = buildChartOfAccountFormat(params, items)
		if (params.hidezeroamount) {
			reportdata.removeAll(reportdata.findAll{it.amount <= 0.0 })
		}

		return [
			title 		: 'STATEMENT OF REVENUE',
			period 		: util.buildPeriod(params),
			reportdata  : reportdata,
		]
	}


	def padTitle(acct, idx){
		def title = acct.title 
		if (acct.leaf == 1){
			title = acct.code + ' - ' + title 
		}
		return (' ' * PADDING_SIZE * idx) + title 
	}


	def buildChartOfAccountFormat(params, items){
		def data = []
		data += items.findAll{it.objid == 'unmapped' || it.parentid == 'unmapped'}.each{ it.leaf = 1}
		def idx = -1

		def rootaccts = null
		if (params.charttype.equalsIgnoreCase('ngas')){
			rootaccts = db.getNgasRootAccounts()
		}
		else {
			rootaccts = db.getSreRootAccounts()
		}
		
		rootaccts.each{ 
			if (params.type.equalsIgnoreCase('standard')) {
				doBuildStandardFormat(params, data, items, idx, it)
			}
			else if (params.type.equalsIgnoreCase('extended')){
				doBuildExtendedFormat(params, data, items, idx, it)
			}
			else if (params.type.equalsIgnoreCase('detailed')){
				doBuildDetailedFormat(params, data, items, idx, it)
			}
		}
		if (!params.type.equalsIgnoreCase('detailed'))
			calculateGroupTotals(data)
		else  
			calculateDetailedGroupTotals(data)
		return data 
	}


	void calculateDetailedGroupTotals(data){
		def maxlevel = data.level.max() 
		for(int i = maxlevel; i > 0; i--){
			['subaccount','detail','group'].each{ type -> 
				def groupaccts = data.findAll{it.level == i && it.type == type && it.leaf == null}
				groupaccts.each{ grpacct ->
					def colls = data.findAll{it.parentid == grpacct.objid}
					def amt = colls.amount.sum()
					if (amt > 0.0 && grpacct.amount == 0){
						grpacct.amount = amt
					}
				}
			}
		}

		//update rootgroups
		data.findAll{it.level == 0 }.each{ rgrp ->
			def amt = data.findAll{it.parentid == rgrp.objid}.amount.sum();
			if (amt > 0.0){
				rgrp.amount = amt 
			}
		}
	}

	void calculateGroupTotals(data){
		def maxlevel = data.level.max() 
		for(int i = maxlevel - 1; i > 0; i--){
			['detail','group'].each{ type -> 
				def groupaccts = data.findAll{it.level == i && it.type == type }
				groupaccts.each{ grpacct ->
					def colls = data.findAll{it.parentid == grpacct.objid}
					def amt = colls.amount.sum()
					if (amt > 0.0 && grpacct.amount == 0){
						grpacct.amount = amt
					}
					else if (amt > 0.0 && grpacct.amount != 0){
						def idx = data.indexOf(grpacct) + colls.size() + 1
						def otheracct = [objid:'O'+ grpacct.objid, parentid:grpacct.objid, title:(' '*PADDING_SIZE) + grpacct.title + ' (OTHERS)', amount:grpacct.amount, leaf:1, type:'subaccount', level:grpacct.level+1]
						data.add(idx, otheracct)
						grpacct.amount += amt
						grpacct.leaf = null
					}
				}
			}
		}

		//update rootgroups
		data.findAll{it.level == 0 }.each{ rgrp ->
			def amt = data.findAll{it.parentid == rgrp.objid}.amount.sum();
			if (amt > 0.0){
				rgrp.amount = amt 
			}
		}

	}

	void doBuildStandardFormat(params, data, items, idx, acct){
		idx += 1
		acct.amount = 0.0
		acct.level = idx 
		def collections = items.findAll{it.accountid == acct.objid}
		if (collections){
			acct.amount = collections.amount.sum()
			acct.target = collections[0]?.target ? collections[0]?.target : 0.0
			acct.percentage = 0.00 + " %"
			if( acct.target  > 0.0 ) {  
				acct.percentage = numSvc.format( '#,##0.00', ( acct.amount / acct.target ) * 100 ) + " %"
			}
			acct.leaf = 1
		}
		acct.title = padTitle(acct, idx)
		data << acct 

		def subaccts = null 
		if (params.charttype.equalsIgnoreCase('ngas'))
			subaccts = db.getNgasSubAccounts([parentid:acct.objid])
		else
			subaccts = db.getSreSubAccounts([parentid:acct.objid])


		subaccts.each{
			doBuildStandardFormat(params, data, items, idx, it )
		}
	}


	void doBuildExtendedFormat(params, data, items, idx, acct){
		idx += 1
		acct.title = padTitle(acct, idx)
		acct.amount = 0.0
		acct.level = idx 
		def collections = items.findAll{it.accountid == acct.objid}
		if (collections){
			acct.amount = collections.amount.sum()
			acct.target = collections[0]?.target ? collections[0]?.target : 0.0
			acct.percentage = 0.00 + " %"
			if( acct.target  > 0.0 ) {  
				acct.percentage = numSvc.format( '#,##0.00', ( acct.amount / acct.target )  * 100 ) + " %"
			}
			acct.leaf = 1
		}
		data << acct

		def subaccts = null 
		if (params.charttype.equalsIgnoreCase('ngas'))
			subaccts = db.getNgasExtendedSubAccounts([parentid:acct.objid])
		else
			subaccts = db.getSreExtendedSubAccounts([parentid:acct.objid])

		subaccts.each{
			doBuildExtendedFormat(params, data, items, idx, it )
		}
	}


	void doBuildDetailedFormat(params, data, items, idx, acct){
		idx += 1
		acct.title = padTitle(acct, idx)
		acct.amount = 0.0
		acct.level = idx 
		data << acct

		def collections = items.findAll{it.parentid == acct.objid}.each{
			it.title = padTitle(it, idx+1)
			it.leaf = 1
		}
		if (collections){
			acct.amount = collections.amount.sum()
			acct.leaf = null
			data.addAll(collections)
		}
		
		def subaccts = null 
		if (params.charttype.equalsIgnoreCase('ngas'))
			subaccts = db.getNgasExtendedSubAccounts([parentid:acct.objid])
		else
			subaccts = db.getSreExtendedSubAccounts([parentid:acct.objid])

		subaccts.each{
			doBuildDetailedFormat(params, data, items, idx, it )
		}
	}


	def getSummarizedRevenueItems(params){
		if (params.charttype.equalsIgnoreCase('ngas')){
			if (params.type.equalsIgnoreCase('standard')) {
				return db.getNgasStandardRevenueItemSummaries(params)
			}
			else if (params.type.equalsIgnoreCase('extended')) {
				return db.getNgasExtendedRevenueItemSummaries(params)
			}
			else if (params.type.equalsIgnoreCase('detailed')) {
				return db.getNgasDetailedRevenueItemSummaries(params)
			}
			else {
				throw new Exception('Report type ' + params.type + ' is not supported.')
			}
		} 
		else
		{
			if (params.type.equalsIgnoreCase('standard')) {
				return db.getSREStandardRevenueItemSummaries(params)
			}
			else if (params.type.equalsIgnoreCase('extended')) {
				return db.getSREExtendedRevenueItemSummaries(params)
			}
			else if (params.type.equalsIgnoreCase('detailed')) {
				return db.getSREDetailedRevenueItemSummaries(params)
			}
			else {
				throw new Exception('Report type ' + params.type + ' is not supported.')
			}
		}
	}


	void buildDateFilter(params){
		if (params.qtr != null && params.month != null) {
			params.fromdate = params.year + '-' + params.month.index + '-01'
			params.todate   = dtSvc.add( dtSvc.getMonthEndDate(dtSvc.parse('yyyy-MM-dd', params.fromdate)), '1d')
		}
		else {
			params.fromdate = dtSvc.getBeginningQtrDate( params.qtr, params.year, 1 )
			params.todate   = dtSvc.add( dtSvc.getQtrEndDate( params.qtr, params.year ), '1d')
		}
	}

}
