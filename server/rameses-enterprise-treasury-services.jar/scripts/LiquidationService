import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class LiquidationService  {

	@ActiveDB("liquidation")
	def em; 

	@Env
	def env;

	@Service("SequenceService")
	def seqSvc;

	@Service("DateService")
	def dateSvc;

	@Service("CashBookPostService")
	def cashBook;
	
	@ActiveDB("liquidatingofficer")
	def liqOfficer;

	@ProxyMethod
	public def init() {
		def o = [objid: "LIQ"+new UID(), cashier:[:]];	
		o.remittances = em.getUnliquidatedRemittances( [liquidatingofficerid: env.USERID]);
		if(!o.remittances)
			throw new Exception("No pending remittances to liquidate");

		o.amount = o.remittances.sum{ it.amount };	
		o.totalcash = o.remittances.sum{ it.totalcash };	
		o.totalnoncash = o.remittances.sum{ it.totalnoncash };	

		//get fund summary
		o.fundsummary =  em.getUnliquidatedFundSummary( [liquidatingofficerid: env.USERID] );		
		o.checks = em.getUnliquidatedChecks( [liquidatingofficerid: env.USERID] );	
		return o;
	}

	@ProxyMethod
	public def post( o ) {
		if( o.fundsummary.find{ !it.cashier }   )
			throw new Exception("There must be a cashier associated");

		def z = liqOfficer.findUserTxnCode( [userid: env.USERID] );

		o.liquidatingofficer = [objid:env.USERID, name:env.FULLNAME, title: env.JOBTITLE ];	

		def txncode = "LIQ";	
		if(z?.usertxncode) txncode = z.usertxncode; 	
		o.txnno = txncode + seqSvc.getNextFormattedSeries(txncode);
		println o.txnno;

		o.state = "OPEN";
		o.dtposted = dateSvc.serverDate;
		em.create( o );

		def ids = "'" + o.remittances*.objid.join("','") + "'";
		def m = [liquidationid:o.objid];
		m.ids = ids;
		em.postLiquidateRemittance(m);
		em.postLiquidateChecks(m);

		//update cashbook to add new entry
		o.fundsummary.each {
				it.objid = "LIQFUND"+new UID();
				it.liquidationid = o.objid;
				em.create( it, "cashier_fund");
				def detail = [:];
				detail.fundid = it.fund.objid;
				detail.subacctid = o.liquidatingofficer.objid; 
				detail.refid = o.objid;
				detail.refno = o.txnno;
				detail.refdate = o.dtposted;
				detail.reftype = "liquidation";
				detail.amount = it.amount;
				detail.particulars = "LIQUIDATION";
				cashBook.postDR( detail );
		}
		return o;		
	}	


	@ProxyMethod
	public def open( o ) {
		o = em.read( [objid:o.objid] );
		o.fundsummary = em.getFundSummaries(['liquidationid': o.objid]);
		o.checks = em.getLiquidatedChecks(o);
		return o;
	}

	@ProxyMethod
	public def getFundSummaries(o) {
		return em.getFundSummaries(['liquidationid', o.objid]);
	}
}	