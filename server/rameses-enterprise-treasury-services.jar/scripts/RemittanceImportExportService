import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*
import com.rameses.util.*

class RemittanceExportService  
{

	@ActiveDB("remittance_import_export")
	def adb

	@Service('RemittanceService')
	def remSvc 



	@ProxyMethod
	public def exportRemittance(objid) {
		def rem = [remittanceid:objid]

		def data = [:]
		data.entity = adb.findRemittanceByid(rem)
		data.rem_afserials = adb.getRemittanceAfSerials(rem)
		data.rem_cashreceipts = adb.getRemittanceCashReceipts(rem)
		data.rem_cashtickets = adb.getRemittanceCashTickets(rem)
		data.rem_checks = adb.getRemittanceCheckPayments(rem)
		data.rem_funds = adb.getRemittanceFunds(rem)

		
		def afcontrols = adb.getUniqueAfControls(rem)

		//afserialcontrols
		data.afserialinventories = [] 
		data.afserialcontrols = [] 
		data.afserialinvdetails = []

		afcontrols.findAll{it.formtype == 'serial'}.each{ afc -> 
			afc.remittanceid = rem.remittanceid 
			data.afserialcontrols << adb.findAfSerialControl(afc)
			data.afserialinventories << adb.findAFSerialInventory(afc)
			data.afserialinvdetails += adb.getAFSerialInventoryDetails(afc)
		}

		//cashtickets
		data.ctinventories = []
		data.ctcontrols = []
		data.ctinvdetails = [] 
		afcontrols.findAll{it.formtype == 'cashticket'}.each{ ct -> 
			ct.remittanceid = rem.remittanceid
			data.ctinventories << adb.findCashTicketInventory(ct)
			data.ctcontrols << adb.findCashTicketControl(ct)
			data.ctinvdetails += adb.getCashtTicketInventoryDetails(ct)
		}

		//cashreceipts
		data.cashreceipts = adb.getCashReceipts(rem)
		data.cashreceiptitems = adb.getCashReceiptItems(rem)
		data.checkpayments = adb.getCashReceiptCheckPayments(rem)
		data.voidedreceipts = adb.getVoidedReceipts(rem)

		return data 
	}



	@ProxyMethod
	public void importRemittance(data){
		checkDuplicatePosting(data.entity)

		//afserialcontrols
		data.afserialinventories.each{  adb.updateAfSerialInventory(EntityUtil.mapToField(it)) }
		data.afserialcontrols.each{  
			adb.updateAFSerialControl(EntityUtil.mapToField(it)) 
		}
		data.afserialinvdetails.each{  adb.insertAfSerialInventoryDetail(EntityUtil.mapToField(it)) }


		//cashtickets
		data.ctinventories.each{  adb.updateCashTicketInventory(EntityUtil.mapToField(it)) }
		data.ctcontrols.each{  
			adb.updateCashTicketControl(EntityUtil.mapToField(it)) 
		}
		data.ctinvdetails.each{  adb.insertCashTicketInventoryDetail(EntityUtil.mapToField(it)) }
		
		//cashreceipts
		data.cashreceipts.each{  adb.insertCashReceipt(EntityUtil.mapToField(it)) }
		data.cashreceiptitems.each{  adb.insertCashReceiptItem(EntityUtil.mapToField(it)) }
		data.checkpayments.each{  adb.insertCheckPayment(EntityUtil.mapToField(it)) }
		data.voidedreceipts.each{  adb.insertVoidReceipt(EntityUtil.mapToField(it)) }

		adb.insertRemittance(EntityUtil.mapToField(data.entity))
		data.rem_afserials.each{ 
			if ( !adb.findRemittanceAfSerial(it) ) {
				adb.insertRemittanceAfSerial(EntityUtil.mapToField(it)) 
			}
		}
		data.rem_cashreceipts.each{  adb.insertRemittanceCashReceipt(EntityUtil.mapToField(it)) }
		data.rem_cashtickets.each{  adb.insertRemittanceCashTicket(EntityUtil.mapToField(it)) }
		data.rem_checks.each{  adb.insertRemittanceCheck(EntityUtil.mapToField(it)) }
		data.rem_funds.each{  adb.insertRemittanceFund(EntityUtil.mapToField(it)) }
	}

	void checkDuplicatePosting(rem){
		if ( adb.findRemittanceByid([remittanceid:rem.objid])){
			throw new Exception('Remittance has already been posted.')
		}
	}

}

