import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*

class RemittanceService  {

	@ActiveDB("remittance")
	def em; 

	@ActiveDB("collector")
	def collector; 

	@Env
	def env;

	@Service("SequenceService")
	def seqSvc;

	@Service("DateService")
	def dateSvc;

	@Service("CashBookPostService")
	def cashBook;
	
	@ProxyMethod
	public def init() {
		def o = [objid: "REM"+new UID()];	
		o.items = em.getUnremittedForCollector([collectorid: env.USERID]);
		o.amount = 0;
		o.totalcash = 0;
		o.totalnoncash = 0;
		if(o.items) {
			o.amount = o.items.sum{ it.amount };	
			o.totalcash = o.items.sum{ it.totalcash };	
			o.totalnoncash = o.items.sum{ it.totalnoncash };	
		}
		o.checks = em.getUnremittedChecks( [collectorid: env.USERID] );
		o.collector = [objid:env.USERID, name:env.FULLNAME, title:env.JOBTITLE ];
		//used for checking
		o.checksum = em.getUnremittedTotals( [collectorid: env.USERID] );
		return o;
	}

	@ProxyMethod
	public def post( o ) {
		if( o.amount == 0 ) 
			throw new Exception("There is no amount to remit");

		//compare checksum. deny if changed
		def checksum = o.checksum;
		def checktest = em.getUnremittedTotals( [collectorid: env.USERID] );
		if(checksum!=checktest)
			throw new Exception("Changes have been made prior to remittance. Please redo transaction");

		def z = collector.findUserTxnCode( [userid: o.collector.objid] );
		def txncode = "REM";	
		if(z?.usertxncode) txncode = z.usertxncode; 	
		o.txnno = txncode + seqSvc.getNextFormattedSeries(txncode);
		o.state = "OPEN";
		o.dtposted = dateSvc.serverDate;
		em.create( o );

		//insert the cash receipts
		def m = [remittanceid: o.objid, collectorid: o.collector.objid ];
		em.collectReceipts(m);
		em.collectChecks(m);
		
		//update cashbook to add new entry
		def flist = em.getRemittedFundTotals(m);
		flist.each {
				def detail = [:];
				detail.fundid = it.fund.objid;
				detail.subacctid = o.collector.objid; 
				detail.refid = o.objid;
				detail.refno = o.txnno;
				detail.refdate = o.dtposted;
				detail.reftype = "remittance";
				detail.amount = it.amount;
				detail.particulars = "REMITTANCE";
				cashBook.postCR( detail );

				def n = [:]
				n.objid = "REMFUND"+new UID();
				n.remittanceid = o.objid;
				n.fund = it.fund;
				n.amount = it.amount;
				em.create( n, "remittance_fund" );
		}
		return o;
	}

	@ProxyMethod
	public def open( o ) {
		o = em.read( o );
		o.checks = em.getRemittedChecks(o);
		return o;
	}

	@ProxyMethod
	public def getUnremittedReceipts(o) {
		def m = [collectorid: o.collector.objid];
		return em.getUnremittedReceipts(m);
	}

	@ProxyMethod
	public def getRemittedReceipts(o) {
		return em.getRemittedReceipts(o);
	}

}