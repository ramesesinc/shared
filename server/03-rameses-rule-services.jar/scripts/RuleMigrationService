import com.rameses.annotations.*;
import com.rameses.util.*;
import java.rmi.server.*;
import com.rameses.common.*
import com.rameses.services.extended.*;


class RuleMigrationService {

	@ActiveDB("rulemigration")
	def em;
	
	@ActiveDB("rule")
	def target;

	@ProxyMethod
	public def downloadDef( def o ) {
		if(!o.domain)
			throw new Exception("Please specify a domain");

		def list = em.getDomainRulesets(o);
		for( rs in list ) {
			def p = [ruleset: rs.name];
			rs.rulegroups = em.getRulegroups(p);
			rs.facts = em.getRuleFacts(p);
			rs.actiondefs = em.getRuleActionDefs(o);
			rs.facts.each {
				it.rulesets = em.getFactRulesets(it);
				it.fields = em.getRuleFactFields(it);
			}		
			rs.actiondefs.each {
				it.rulesets = em.getActionDefRulesets(it);
				it.params = em.getRuleActionDefParams(it);
			}		
		}
		return list;
	}
	

	@ProxyMethod
	public void uploadDef( def list ) {
		for( rs in list ) {
			//save rulesets
			target.save( rs, "ruleset" );

			//save rulegroups
			for ( x in rs.rulegroups ) {
				target.save( x, "rulegroup" );
			}

			//save facts
			for( x in rs.facts ) {
				target.save( x, "fact" );
				for( f in x.fields )  {
					target.save( f, "fact_field" );
				}
				def test = target.read( [ruleset: rs.name, rulefact: x.objid ], "ruleset_fact" );
				if(!test) {
					target.create( [ruleset: rs.name, rulefact: x.objid ], "ruleset_fact" );
				}
			}

			//save action defs
			for(y in rs.actiondefs ) {
				target.save( y, "actiondef" );
				for( x in y.params ){
					target.save( x, "actiondef_param" );
				}
				def test = target.read( [ruleset: rs.name, actiondef: y.objid ], "ruleset_actiondef" );
				if(!test) {
					target.create( [ruleset: rs.name, actiondef: y.objid ], "ruleset_actiondef" );	
				}
			}
		}
	}

}
