import com.rameses.annotations.*;
import com.rameses.common.*;
import java.rmi.server.UID;
import com.rameses.util.*;

class RuleLoaderService {


	@Resource('RuleService')
	def ruleSvc; 

	@ActiveDB('rule')
	def ruleDB;
	
	@Context
	def appContext;
	
	@Resource('TemplateService')
	def templateSvc; 
	
	@Cache
	def cache;
	
	@Schedule
	public def loadRules(tsk) {
		println "LOADING RULES V2";
		def rulesets = ruleDB.getRulesets()*.name;
		
		def readers = null;
		def loadrules = { m->
			try {
				readers << new InputStreamReader(m.url.openStream());
			}
			catch(e) {println "error load " + e.message; }
		} as ScanFileFilter;
		
		//loading rule sequence. file facts and rules. db rules
		rulesets.each { rs->
			println "loading rule " + rs;
			readers = [];

			/** load facts definition from file and db **/
			appContext.scanFiles( "rulesets/"+rs+"/facts", loadrules, ".*\\.drl");

			/** load rules from file and db **/
			appContext.scanFiles( "rulesets/"+rs+"/rules", loadrules, ".*\\.drl");
			ruleDB.getRulesForDeployment( [ruleset:rs] ).each{ r->
				try {
					String s = r.ruletext;
					readers << new java.io.StringReader( s );
				}
				catch(e) {
					e.printStackTrace();
				}
			}

			ruleSvc.buildRuleContext(rs, readers);
		}
		
		
	}	
}