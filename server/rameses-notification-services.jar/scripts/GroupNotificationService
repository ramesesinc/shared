import com.rameses.annotations.*;
import com.rameses.util.*;

class GroupNotificationService
{	
	@ActiveDB('group_notification')
	def em;

	@Service('DateService')
	def dateSvc;

	@Service 
	def self;

	@Env
	def env;

    @ProxyMethod 
    public def addMessage( data ) { 
    	data.objid   = 'MSG'+new java.rmi.server.UID();
    	data.dtfiled = dateSvc.serverDate; 
    	if (!data.senderid) data.senderid = env.USERID; 

        em.create(data, 'group'); 
		notify(data);
		return data;  
    } 

    @ProxyMethod 
    public void removeMessage( params ) { 
        def data = null; 
        if (params.fileid) { 
            data = em.findByFileid( params ); 
        } else { 
            data = em.findByPrimary( params ); 
        } 

        if (!data) return; 

        em.delete(data, 'group'); 
        self.notifyRemove(data);   
    } 

    @ProxyMethod 
    public def getList( params ) {
        return em.getList( params ); 
    } 

    @ProxyMethod 
    public void getNotified( params ) {
        if (!params.groups) return;

        params.groups.each {
            def list = getList([groupid: it]); 
            self.notifyMessages(list); 
        } 
    } 



	@XConnection('ws_sender')
	def wssender;

    @Async
    @ProxyMethod(local=true)
    public void notify( data ) {
        data.channel = 'group'; 
        data.status  = 'PENDING'; 
		wssender.send( data ); 
    }    

    @Async
    @ProxyMethod(local=true)
    public void notifyRemove( data ) {
        data.channel = 'group'; 
        data.status  = 'REMOVED'; 
        wssender.send( data ); 
    }     

    @Async
    @ProxyMethod(local=true)
    public void notifyMessages( list ) {
        list?.each { 
            it.channel = 'group'; 
            it.status  = 'PENDING'; 
            wssender.send( it ); 
        } 
    } 
}