import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID;
import com.rameses.util.*;
import com.rameses.io.*;
import com.rameses.services.extended.*;

class EntityService extends AbstractCrudListService {

	@PersistenceContext("entity")
	def	em; 

	@Service('SequenceService')
	def seqSvc;

	@Env
	def env;

	String schemaName = "entity";

	String pagingKeys = 'e.objid'

	def INDEX_CHAR_COUNT = 300

	@ProxyMethod
	public def getColumns( params ) {
		def columns = [
			[name:'entityno', caption:'Entity No', width:80, resizable:false] 			
		]; 
		if ("individual".equalsIgnoreCase(params.type)) {
			columns.addAll([
				[name:'name', caption:'Name'], 
				[name:'address', caption:'Address'], 				
				[name:'gender', caption:'Gender', width:50, resizable:false, alignment:'center'], 
				[name:'birthdate', caption:'Birth Date', width:70, resizable:false, alignment:'center'], 
				[name:'tin', caption:'TIN']	
			]);
		} 
		else if ("juridical".equalsIgnoreCase(params.type)) { 
			columns.addAll([
				[name:'name', caption:'Company Name'], 
				[name:'address', caption:'Company Address'], 
				[name:'dtregistered', caption:'Date Registered', width:100, resizable:false, alignment:'center'], 
				[name:'orgtype', caption:'Org.Type'], 
				[name:'nature', caption:'Business Nature'], 
				[name:'tin', caption:'TIN']	
			]);
		} 
		else { 
			columns.addAll([
				[name:'fullname', caption:'Name'], 
				[name:'type', caption:'Type']
			]);
		}
		return columns; 
	}

	public void beforeCreate( entity ) {
		if (!entity.objid) throw new Exception('Please specify objid'); 
		if (!entity.type) throw new Exception('Please specify type'); 

		entity.entityno = seqSvc.getNextFormattedSeries( "ENTITY" ); 
		if ("individual".equalsIgnoreCase(entity.type)) { 
			entity.name = entity.lastname+', '+entity.firstname; 
			if (entity.middlename) entity.name += ' '+entity.middlename; 
		} 
		updateEntityNameInfo(entity)
	} 

	void updateEntityNameInfo(entity){
		def len = entity.name.length()
		if (len > INDEX_CHAR_COUNT) len = INDEX_CHAR_COUNT
		entity.entityname = entity.name.substring(0, len)
	}

	public void afterCreate( entity ) { 
		def type = entity.type.toLowerCase();
		em.create(schemaName+':'+type, entity);
		createContacts( entity );

		if (type == 'multiple') afterCreateMultiple(entity); 
	} 

	public void beforeUpdate( entity ) { 
		if (!entity.type) throw new Exception('Please specify type'); 
		updateEntityNameInfo(entity)
	} 

	public void afterUpdate( entity ) {
		def type = entity.type.toLowerCase();
		em.update(schemaName+':'+type, entity); 
		updateContacts( entity );

		if (type == 'multiple') afterUpdateMultiple(entity); 
	} 

	public void afterOpen( entity ) {
		if (!entity.type) return;

		openContacts( entity );

		def type = entity.type.toLowerCase();
		def o = em.read(schemaName+':'+type, entity);
		if (o) entity.putAll(o); 

		if (type == 'multiple') afterOpenMultiple(entity);
	} 

	public def getList( params ) {
		if (!params.name) params.name = params.searchtext; 
		params.name = (params.name? params.name+'%': '%');

		def qryname = 'entity'+(params.type? params.type.toLowerCase(): ''); 
		def qry = em.sqlContext.createNamedQuery(qryname+':getList').setParameters(params);	
		qry.setPagingKeys('e.objid')
		qry.setFirstResult(params._start? params._start: 0); 
		qry.setMaxResults(params._limit? params._limit: 20); 

		return qry.resultList;
	}


	private void createContacts( entity ) {
		if (!entity.contacts) return;

		entity.contacts.each{
			it.entityid = entity.objid;
			em.create(schemaName+':contact', it); 
		}
	}

	private void updateContacts( entity ) {
		em.sqlContext.createNamedExecutor(schemaName+':removeContacts').setParameters([objid: entity.objid]).execute();
		entity.contacts?.each{
			it.entityid = entity.objid;
			em.create(schemaName+':contact', it); 
		}
	}

	private void openContacts( entity ) {
		def list = em.sqlContext.createNamedQuery(schemaName+':getContacts').setParameters([objid: entity.objid]).resultList;
		entity.contacts = list; 
	}	

	private void afterCreateMultiple( entity ) { 
		entity.members.each { 
			it.entityid = entity.objid;
			em.create(schemaName+':member', it); 
		} 
	}

	private void afterUpdateMultiple( entity ) { 
		em.sqlContext.createNamedExecutor('entitymultiple:removeMembers').setParameters([objid: entity.objid]).execute();
		entity.members.each { 
			it.entityid = entity.objid;
			em.create(schemaName+':member', it); 
		} 
	} 

	private void afterOpenMultiple( entity ) { 
		def list = em.sqlContext.createNamedQuery('entitymultiple:getMembers').setParameters([objid: entity.objid]).resultList; 
		entity.members = (list? list: []); 
	}	
}
