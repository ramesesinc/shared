import com.rameses.annotations.*
import com.rameses.common.*
import java.rmi.server.UID;
import com.rameses.util.*;
import com.rameses.io.*;
import com.rameses.services.extended.*;


class IndividualEntityService extends AbstractCrudListService {

	@PersistenceContext("entity")
	def	em; 

	@Service('SequenceService')
	def seqSvc;

	@Env
	def env;

	String schemaName = "entity";
	String subSchemaName = "individual";
	
	@ProxyMethod
	public def getColumns( param ) {
		return  [
			[name:'entityno', caption:'Entity No', width:80, resizable:false], 
			[name:'name', caption:'Name'], 
			[name:'gender', caption:'Gender', width:50, resizable:false, alignment:'center'], 
			[name:'birthdate', caption:'Birth Date', width:70, resizable:false, alignment:'center'], 
			[name:'address', caption:'Address']			
		]
	}

	public void beforeCreate( entity ) {
		entity.objid = 'IND'+ new UID();
		entity.type = 'INDIVIDUAL';
		entity.entityno = seqSvc.getNextFormattedSeries( "ENTITY" )
		entity.name = entity.lastname+', '+entity.firstname
		if (entity.middlename) entity.name += ' '+entity.middlename

		em.create(schemaName, entity); 
	}

	public void beforeUpdate( entity ) { 
		em.update(schemaName, entity); 		
	} 

	public void afterOpen( entity ) {
		def o = em.read(schemaName, entity);
		if (o) entity.putAll(o); 
	}

	public def getList( params ) {
		if (!params.name) params.name = params.searchtext; 
		params.name = (params.name? params.name+'%': '%');

		def qry = em.sqlContext.createNamedQuery('individualentity:getList').setParameters(params);	
		qry.setFirstResult(params._start? params._start: 0); 
		qry.setMaxResults(params._limit? params._limit: 20); 
		return qry.resultList;
	}
}


