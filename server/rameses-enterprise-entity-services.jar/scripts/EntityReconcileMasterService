import com.rameses.common.*import com.rameses.annotations.*class EntityReconcileMasterService{	@PersistenceContext('entity')	def em		@ProxyMethod	public def reconcile( args ) {		def retval = [status:'ok']		try {			def entity = args.entity 			def reconciledList = args.reconciledList 			if( ! entity ) throw new Exception('Entity is required ')			if( ! reconciledList ) throw new Exception('At least one reconciled entity is required.')						reconcileFaas( entity, reconciledList )			reconcileBPApplication( entity, reconciledList )			reconcileReceipt( entity, reconciledList )			deleteReconciledEntities( entity, reconciledList )		}		catch( e ) {			retval.status = 'error'			retval.msg = e.message 		}		return retval	}		void deleteReconciledEntities( entity, reconciledList ){		reconciledList.each{			//insert reconciled entity backup 			it.info = em.serializer.read( it.info )			em.sqlContext.createNamedExecutor('entityreconcile:insertReconciledEntity')				.setParameters([					entityid 			: entity.objid,					reconciledentityid	: it.objid, 					entity				: em.serializer.write( it ),				])				.execute()						//delete reconciled entity 			if( it.entitytype == 'multiple' ) {				em.sqlContext.createNamedExecutor('entityreconcile:deleteEntityMember')					.setParameter('entityid', it.objid )					.execute()			}			em.sqlContext.createNamedExecutor('entityreconcile:deleteEntity')					.setParameter('objid', it.objid )					.execute()		}	}		void reconcileBPApplication( entity, reconciledList ) {		def params = [			taxpayerid 		: entity.objid,			taxpayername 	: entity.entityname,			taxpayeraddress	: entity.entityaddress,			taxpayerno		: entity.entityno		]					reconciledList.each { reconciledEntity ->			def applist = em.sqlContext.createNamedQuery('entityreconcile:getBPApplicationByTaxpayer')								.setParameter('taxpayerid', reconciledEntity.objid )								.resultList											applist.each{ app ->				//update bpapplication 				app.info = em.serializer.read( app.info )				updateTaxpayerInfo(entity, app.info)								em.sqlContext.createNamedExecutor('entityreconcile:updateBPApplicationTaxpayerInfo')								.setParameter('taxpayerid', entity.objid )								.setParameter('info', em.serializer.write(app.info))								.setParameter('objid', app.objid )								.execute()												params.appid = app.objid				params.businessid = app.businessid 												//update bpapplicationlisting 				em.sqlContext.createNamedExecutor('entityreconcile:updateBPApplicationListing')								.setParameters( params )								.execute()												//update business 				em.sqlContext.createNamedExecutor('entityreconcile:updateBusinessInfo')								.setParameters( params )								.execute()								//update bppermit 				em.sqlContext.createNamedExecutor('entityreconcile:updateBPPermitInfo')								.setParameters( params )								.execute()			}		}	}				void reconcileFaas( entity, reconciledList ) {		def params = [			taxpayerid 		: entity.objid,			taxpayername 	: entity.entityname,			taxpayeraddress	: entity.entityaddress,			taxpayerno		: entity.entityno,		]				reconciledList.each { reconciledEntity ->			def faaslist = em.sqlContext.createNamedQuery('entityreconcile:getFaasListByTaxpayer')								.setParameter('taxpayerid', reconciledEntity.objid )								.resultList											faaslist.each{ 				params.faasid = it.objid 								//update faaslist 				em.sqlContext.createNamedExecutor('entityreconcile:updateFaasListTaxpayerInfo')								.setParameters( params )								.execute()												//update rptledger 				em.sqlContext.createNamedExecutor('entityreconcile:updateRPTLedgerTaxpayerInfo')								.setParameters( params )								.execute()								//update faas.info field 				def faas = em.sqlContext.createNamedQuery('entityreconcile:getFaasById')								.setParameter('faasid', it.objid )								.singleResult				if( faas ) {					faas.info = em.serializer.read( faas.info )					updateTaxpayerInfo( entity, faas.info )					em.sqlContext.createNamedExecutor('entityreconcile:updateFaasInfo')								.setParameter('info', em.serializer.write( faas.info ))								.setParameter('faasid', it.objid )								.execute()				}			}		}	}		void reconcileReceipt( entity, reconciledList ) {		reconciledList.each { reconciledEntity ->			def receiptlist = em.sqlContext.createNamedQuery('entityreconcile:getReceiptByTaxpayer')								.setParameter('taxpayerid', reconciledEntity.objid )								.resultList											receiptlist.each{ rct ->				em.sqlContext.createNamedExecutor('entityreconcile:updateReceiptPayorInfo')								.setParameter('payorid', entity.objid )								.setParameter('payorname', entity.entityname )								.setParameter('payoraddress', entity.entityaddress )								.setParameter('objid', rct.objid )								.execute()			}		}	}				void updateTaxpayerInfo( entity, info ) {		info.taxpayerid 		= entity.objid		info.taxpayername 		= entity.entityname		info.taxpayeraddress 	= entity.entityaddress 		info.taxpayerno 		= entity.entityno 	}}