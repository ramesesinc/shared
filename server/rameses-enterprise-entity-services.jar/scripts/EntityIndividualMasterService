import com.rameses.annotations.*;
import com.rameses.common.*;
import java.rmi.server.UID

class EntityIndividualMasterService 
{
	@PersistenceContext('entity')
	def em
	
	@Service('SequenceService')
	def seqSvc;

	@Service('DateService')
	def dtSvc 
	
	def SCHEMA_NAME = 'entityindividual'
	
	@ProxyMethod
	public def init() {}
	
	@ProxyMethod
	public def create( entity ) {
		entity.objid = 'IND'+ new UID();
		entity.type = 'INDIVIDUAL';
		entity.entityno = seqSvc.getNextFormattedSeries( "ENTITY" )
		entity.name = entity.lastname+', '+entity.firstname
		if (entity.middlename) entity.name += ' '+entity.middlename
		
		//checkDuplicateEntityName( entity )		
		em.create( 'entity', entity )
		em.create( SCHEMA_NAME, entity )
				
		//saveCards( entity )
		//saveContacts( entity )
		return entity;
	}
	
	void saveCards( entity ) {
		em.sqlContext.createNamedExecutor('entitycard:deleteCardByEntity').setParameters(entity).execute()
		entity.cards.each{ 
			it.entityid = entity.objid 
			it.objid = 'E'+new java.rmi.server.UID()
			def duplicate = em.sqlContext.createNamedQuery('entitycard:getDuplicateCard').setParameters(it).singleResult 
			if( duplicate ) throw new Exception(it.cardtype + ' ID No. ' + it.cardno + ' is already assigned to ' + duplicate.name + '.')
			em.sqlContext.createNamedExecutor('entitycard:insertCard')
						.setParameters( it )
						.execute()
		}
	}
	
	void saveContacts( entity ) {
		em.sqlContext.createNamedExecutor('entitycontact:deleteContactByEntity').setParameters(entity).execute()
		entity.contacts.each{ 
			it.entityid = entity.objid 
			it.objid = 'E'+new java.rmi.server.UID()
			em.sqlContext.createNamedExecutor('entitycontact:insertContact')
						.setParameters( it )
						.execute()
		}
	}
		
	void checkDuplicateEntityName( entity ) {
		def params = [ objid:entity.objid, name:entity.name, address:entity.address ]
		def data = em.sqlContext.createNamedQuery('entity:checkDuplicateName').setParameters( params ).singleResult 
		if( data ) throw new Exception( entity.name + ' already exists with Entity No. ' + data.entityno +'.\nDuplicate name and address combination is not allowed.')
	}
	
	@ProxyMethod
	public def update( entity ) {
		em.validate( 'entity', entity )
		em.validate( SCHEMA_NAME, entity )
		
		entity.name = entity.lastname+', '+entity.firstname
		if( entity.middlename ) entity.name += ' '+entity.middlename
		
		em.update( 'entity', entity )
		em.update( SCHEMA_NAME, entity )
		
		saveCards( entity )
		saveContacts( entity )
		
		return entity
	}
	
	@ProxyMethod
	public def open( entity ) {
		entity = em.read( 'entity', entity )
		if( !entity ) throw new Exception('Entity does not exists or has already been deleted.')
		
		entity.putAll( em.read( SCHEMA_NAME, entity ) )
		entity.cards = loadCards( entity )
		entity.contacts = loadContacts( entity )
		entity.seniorcitizen = getSeniorCitizenStatus(entity)
		return entity
	}
	
	@ProxyMethod
	public def getSeniorCitizenStatus(entity){
		if (entity.birthdate){
			def birthyear = dtSvc.getYear( entity.birthdate )
			def age = dtSvc.serverYear - birthyear
			return (age >= 60)
		}
		return null
	}

	def loadCards( entity ) {
		return em.sqlContext.createNamedQuery('entitycard:getCardByEntity').setParameter('entityid', entity.objid ).resultList
	}
	
	def loadContacts( entity ) {
		return em.sqlContext.createNamedQuery('entitycontact:getContactByEntity').setParameter('entityid', entity.objid ).resultList
	}
	
	@ProxyMethod
	public def delete( entity ) {
		em.delete( SCHEMA_NAME, entity )
		em.delete( 'entity', entity )
	}
}