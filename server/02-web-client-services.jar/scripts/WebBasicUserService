import com.rameses.annotations.*;
import com.rameses.util.*;

class WebBasicUserService
{
	@ActiveDB(value='sysuser', em='admin')
	def sysuser;

	@Service('DateService')
	def dateSvc;

	@Service('Var')
	def var;

	@Env 
	def env;

	@ProxyMethod 
	public Map getInfo( username ) {
		if ("sa".equalsIgnoreCase(username.toString())) {
			return [
				objid:username, username:username, name:username, 
				lastname:'administrator', firstname:'system', pwd:var.sa_pwd 
			]; 
		} else { 
			return sysuser.findUser([username: username]); 
		} 
	}

	@ProxyMethod 
	public List getUsergroups( userid ) { 
		return sysuser.getUsergroups([userid: userid]); 
	} 

	@ProxyMethod 
	public Map authenticate( username, password ) 
	{
		def info = getInfo( username );
		if (!info || password != info.pwd)  
			throw new Exception("Access denied. Please check your username and password"); 

		return info;
	}

 	@ProxyMethod 
	public void incrementLoginCount( username, pwdlogincount ) {
		sysuser.incrementLoginCount([username: username, pwdlogincount: pwdlogincount]);
	} 

	@ProxyMethod
	public void changePassword(Map params) {
		//initial validation for double checking
		if (!params.username) throw new Exception('Please specify username');
		if (!params.newpassword) throw new Exception('Please specify newpassword');
		if (!params.oldpassword) throw new Exception('Please specify oldpassword');

		if ("sa".equalsIgnoreCase(params.username.toString())) {
			var.set('sa_pwd', params.newpassword); 
			return; 
		} 

		def pwd_change_cycle = 3;
		try { pwd_change_cycle = var.pwd_change_cycle.toInteger(); } catch(e) {;} 

		def pwd_change_date_interval = var.pwd_change_date_interval; 
		if (!pwd_change_date_interval) pwd_change_date_interval = '1M'; 

		//initiate lock
		def newlockid = 'LOCK'+new java.rmi.server.UID();
		sysuser.updateLock([
			username: params.username, 
			lockid:   newlockid 
		]); 

		//get account info
		def info = getInfo( params.username ); 
		if (!info || info.pwd != params.oldpassword)  
			throw new Exception('Invalid username and password'); 

		//check against used passwords
		def pwds = (info.usedpwds? info.usedpwds.split(',').toList(): []);
		if (pwds.isEmpty() && info.pwd != null) pwds.add(info.pwd); 

		while (pwds.size() > pwd_change_cycle) pwds.remove(0); 

		if (pwds.contains(params.newpassword)) 
			throw new Exception('You have already used this password before. Please specify another password.'); 

		pwds.add(params.newpassword); 
		if (pwds.size() > pwd_change_cycle) pwds.remove(0); 

		info.pwdexpirydate = DateUtil.add(dateSvc.serverDate, pwd_change_date_interval);
		info.pwdlogincount = 0;
		info.pwd = params.newpassword; 
		info.usedpwds = pwds.join(','); 
		sysuser.update(info, 'password'); 
	} 	

	@ProxyMethod
	public void resetPassword(Map params) {
		//initial validation for double checking
		if (!params.userid) throw new Exception('Please specify userid');
		if (!params.password) throw new Exception('Please specify password');

		def info = sysuser.read([objid: params.userid], 'password'); 
		if (!info) throw new Exception("'"+params.userid+"' user record does not exist"); 

		//initiate lock
		def newlockid = 'LOCK'+new java.rmi.server.UID();
		sysuser.update([objid: params.userid, lockid: newlockid], 'lock'); 

		info.pwd = params.password;
		info.pwdexpirydate = null;
		sysuser.update(info, 'password'); 
	} 

 	@ProxyMethod 
	public def getPermissions( params ) { 
		if (params.orgname) {
			return sysuser.getPermissionsByOrg(params); 
		} else {
			return sysuser.getPermissions(params); 
		} 
	} 
}