import com.rameses.annotations.*;
import com.rameses.util.*;
import com.rameses.services.extended.*;

class WebBasicSessionService
{
	@ActiveDB(value='session', em='admin')
	def em;

	@Service('WebBasicUserService')
	def userSvc;

	@Service('DateService')
	def dateSvc;

	@ProxyMethod 
	public Map createSession( userid, username ) {
		if (!userid) throw new Exception('Please specify userid'); 
		if (!username) throw new Exception('Please specify username'); 

		//clear active sessions that were left open 
		//def list = em.sqlContext.createNamedQuery('session:getList').setParameters([userid: userid]).resultList; 
		//while (!list.isEmpty()) {
		//	def item = list.remove(0);
		//	item.timeout = dateSvc.serverDate.toString();
		//	item.state = 'TIMEDOUT'; 
		//	em.create('session:log', item);
		//	em.delete('session', item);
		//}

		def sess = [
			sessionid: 	'SESS'+new java.rmi.server.UID(), 
			userid: 	userid, 
			username: 	username, 
			clienttype: 'WEB', 
			timein: 	dateSvc.serverDate.toString() 
		]; 
		sess.accesstime = sess.timein; 
		em.create(sess); 
		return sess;
	} 

	@ProxyMethod 
	public void closeSession( sessionid ) {
		def sess = getSession(sessionid); 
		if (!sess) return;

		sess.timeout = dateSvc.serverDate.toString();
		sess.state = 'LOGOUT'; 
		em.create(sess, 'log');
		em.delete(sess);
	} 

	@ProxyMethod 
	public Map getSession( sessionid ) {
		return em.read([sessionid: sessionid]);
	}

	@ProxyMethod
	public Map getUserBySession(params) {
		def sess = getSession(params.sessionid); 
		if (!sess) throw new Exception('INVALID_SESSION'); 

		def user = userSvc.getInfo(sess.username); 
		sess.user = (user == null? [:]: user); 

		def usergroups = userSvc.getUsergroups(sess.user.objid);
		sess.roles = usergroups.collect{ it.title }.join(', ');
		return sess; 
	} 
}