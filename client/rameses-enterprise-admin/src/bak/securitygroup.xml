<workunit>
    <invokers>
        <invoker type="usergroup-folder:formActions" caption="Security Group" 
            target="popup" action="init" role="SYSADMIN" icon="images/securitygroup.png"/>
        
        <invoker type="formActions" caption="New"  action="addNew" visibleWhen="#{mode=='read'}" icon="images/toolbars/create.png"/>
        <invoker type="formActions" caption="Edit"  action="edit" visibleWhen="#{editVisible == true}"/>
        <invoker type="formActions" caption="Save"  action="save" visibleWhen="#{mode!='read'}"/>
        <invoker type="formActions" caption="Cancel"  action="cancel" visibleWhen="#{mode!='read'}"/>
    </invokers>
    
    <code>
    <![CDATA[ 
        import com.rameses.rcp.annotations.*;
        import com.rameses.rcp.common.*;
        import com.rameses.osiris2.client.*;
        import com.rameses.osiris2.common.*;
        import java.rmi.server.*;
        
        class SecurityGroupController {
        
            @Service("SecuritygroupAdminService")
            def sgSvc;
            
            def node, filetype;
            
            def title = "Security Group"; 
            def entity = [:]
            def usergroupid;            
            def selectedEntity;
            def mode = "read";
            def permissions;
            def objectList;
            def selectedObject;            
            
            void init() {
                mode = "read";            
                usergroupid =  node.usergroupid;
                permissions = sgSvc.getPermissions([usergroupid:usergroupid]);
                objectList = permissions.collect{ it.object }.unique();
                if(objectList.size()>0) selectedObject = objectList[0];
            }
            
            def listHandler = [
                fetchList: { o->
                    def m = [usergroupid:usergroupid];
                    return sgSvc.getList(m);
                }
            ] as BasicListModel;
            
            
            //the editing page
            def addNew() {
                entity = [usergroupid:usergroupid];
                entity.objid = "USG-"+new UID();
                permissions.each {
                    it.checked = true;
                }
                mode = "create";
                return "info";
            }
            
            boolean isEditVisible(){
                return (mode == 'read' && selectedEntity != null); 
            }
            
            def edit() {
                entity = sgSvc.open(selectedEntity);
                def _exclude = entity.exclude;
                permissions.each {
                    it.checked = true;
                    if (_exclude) { 
                        it.checked = (it.code.matches(_exclude)? false: true);
                    } 
		}
                mode = "edit";
                return "info";
            }   
            
            def save() {
                entity.exclude = buildExclude();
                if (mode == 'create')
                    sgSvc.create(entity);    
                else
                    sgSvc.update(entity);
                    
                listHandler.reload();
                mode="read";
                return "default";
            }
            
            
            def cancel() {
                if(MsgBox.confirm("Any changes made will be discared. Confirm?")) {
                    mode = "read";
                    return "default";
                }
            }
            
            def permissionListModel = [
                fetchList: { o->
                    if(!selectedObject) return  [];
                    return permissions.findAll{ it.object == selectedObject };
                }
            ] as EditorListModel;
        
            def buildExclude() {
                def excludes = [];
                permissions.groupBy{ it.object }.each{ k,v->
                    def checkedList = v.findAll{ it.checked };
                    if(checkedList.size()==0) {
                        excludes << k + ".*";
                    }   
                    else {
                        def uncheckedList = v.findAll{ !it.checked }; 
                        if(uncheckedList.size() >0) {
                            excludes << k + ".(" + uncheckedList*.permission.join("|") + ")";
                        }
                    } 
                }
                return excludes.join("|");
            }
            
        }
    ]]> 
    </code>
        
    <pages>
        <page template="com.rameses.admin.usergroup.SecurityGroupSelectionPage"/> 
        <page name="info" template="com.rameses.admin.usergroup.SecurityGroupInfoPage"/> 
    </pages>    
</workunit>