<workunit>
    <invokers>
        <invoker type="securitygroup:create" action="create" caption="Create Security Group" 
            resizable="false" target="popup" />
        <invoker type="securitygroup:edit" action="edit" caption="Edit Security Group" 
            resizable="false" target="popup" />
        <invoker type="securitygroup:custom" action="customize" caption="Customize Security Group" 
            resizable="false" target="popup" />
            
   </invokers>
   
   <code>
        <![CDATA[

        import com.rameses.rcp.annotations.*;
        import com.rameses.rcp.common.*;
        import com.rameses.osiris2.client.*;
        import com.rameses.osiris2.common.*;
        import java.rmi.server.*;

        public class SecurityGroupPermissionController {
        
            @Service('UsergroupService')
            def svc; 
            
            def usergroup;
            def permissions;
            def securitygroup;
            def securitygroupname;
            
            def objectList;
            def selectedObject;

            def securitygroupExclude;
            def customExclude;
            
            void init() { 
                if(!securitygroup) 
                    securitygroupname = 'DEFAULT';
                else
                    securitygroupname = securitygroup.name;
                permissions = svc.getPermissions(usergroup); 
                permissions.each {
                    it.checked = (!customExclude || !it.code.matches(customExclude));
                }
                objectList = permissions*.object.unique();
            } 
            
            void create() {
                securitygroup = [usergroup:usergroup, objid:"SECGRP"+new UID()];
                init();
            }
            
            void open() {
                init();
            }
            
            void customize() {
                init();
            }
            
            def permissionListModel = [
                fetchList: {o-> 
                    if (!selectedObject) return []; 
                    def list = permissions.findAll {
                        it.object == selectedObject;
                    };
                    return list;
                }
            ] as EditorListModel;
            
            def buildExclude() {
                def excludes = [];
                permissions.groupBy{ it.object }.each{ k,v->
                    def checkedList = v.findAll{ it.checked };
                    if(checkedList.size()==0) {
                        excludes << k + ".*";
                    }   
                    else {
                        def uncheckedList = v.findAll{ !it.checked }; 
                        if(uncheckedList.size() >0) {
                            excludes << k + ".(" + uncheckedList*.permission.join("|") + ")";
                        }
                    } 
                }
                return excludes.join("|");
            }             
            
            def doOk() {
                entity.exclude = buildExclude(); 
                svc.updatePermission([objid: entity.objid, exclude: entity.exclude]); 
                return '_close';
            } 
            
            def doCancel() {
                return '_close';
            }
        }
        
       ]]>
   </code>
   
   <pages>
       <page template="com.rameses.admin.usergroup.SecurityGroupPage"/>
   </pages>
</workunit>