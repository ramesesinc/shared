<workunit>
    <invokers>
        <invoker type="user-usergroupmgmt:open" caption="Manage User Group" action="open" target="popup"/>
        
        <invoker type="formActions" caption="Cancel" action="doCancel" mnemonic="c" immediate="true"/> 
        <invoker type="formActions" caption="Add" action="doShowAddPage" mnemonic="a" immediate="true"/> 
        <invoker type="formActions" caption="Remove" action="doRemoveItem" mnemonic="r" immediate="true" visibleWhen="#{selectedMembership != null}"/>
                        
        <invoker type="addpage:formActions" caption="Cancel" action="doCancel" shortcut="ctrl X" immediate="true"/>
        <invoker type="addpage:formActions" caption="Back" action="_default" mnemonic="b" immediate="true"/> 
        <invoker type="addpage:formActions" caption="Next" action="doShowHandlerPage" mnemonic="n" immediate="false" visibleWhen="#{selectedUsergroup != null}"/> 
        
        <invoker type="handlerpage:formActions" caption="Cancel" action="doCancel" mnemonic="c" immediate="true"/>
        <invoker type="handlerpage:formActions" caption="Back" action="_addpage" mnemonic="b" immediate="true"/> 
        <invoker type="handlerpage:formActions" caption="Submit" action="doSubmit" mnemonic="s" immediate="false"/> 
    </invokers>
   
    <code>
    <![CDATA[
        import com.rameses.rcp.annotations.*;
        import com.rameses.rcp.common.*;
        import com.rameses.osiris2.client.*;
        import com.rameses.osiris2.common.*;

        public class UserGroupManagementController {
            
            @Service('UserSecuritygroupService') 
            def svc;
            
            //sets by the caller 
            def entity, handler, usergroup; 
            
            def usergrouplist;
            def openerObject;
            def pagekey;
        
            @PropertyChangeListener 
            def propertyListener = [
                'selectedUsergroup': { 
                    securitygroupHandler.reload(); 
                } 
            ];
            
            void open() {                
            } 
                        
            def selectedMembership;
            def membershipHandler = [
                fetchList: { 
                    return entity?.usergroups; 
                }, 
                
                onRemoveItem: {
                    if (!MsgBox.confirm('Are you sure you want to remove this item?')) return false; 
                    
                    svc.removeMembership([objid:it.objid, userid:entity.objid]); 
                    if (handler) handler();
                    
                    this.membershipHandler.reload();
                    return false;
                } 
            ] as EditorListModel;  
                        
            def doShowAddPage() { 
                usergrouplist = svc.getUsergroups(); 
                return 'addpage'; 
            }
            
            void doRemoveItem() {
                if (!MsgBox.confirm('Are you sure you want to remove this item?')) return; 

                svc.removeMembership([objid:selectedMembership.objid, userid:entity.objid]); 
                if (handler) handler();

                membershipHandler.reload();   
            }


            def selectedUsergroup; 
            def usergroupHandler = [
                fetchList: { 
                    return usergrouplist; 
                }                 
            ] as BasicListModel;  
            
                        
            def doCancel() { return '_close'; }
            
            def doShowHandlerPage() { 
                if (!selectedUsergroup) throw new Exception('Please select a usergroup'); 

                def data = selectedUsergroup;
                data.user = [ 
                    objid: entity.objid, 
                    lastname: entity.lastname, 
                    firstname: entity.firstname, 
                    middlename: entity.middlename,
                ];
                data.user.fullname = data.user.lastname + ', '+data.user.firstname;
                if (data.user.middlename) data.user.fullname += ' '+data.user.middlename;
                
                def securitygroups = svc.getSecuritygroups([usergroupid: selectedUsergroup.objid]);                 
                def orgclass = selectedUsergroup.orgclass;
                def invtype = ('user-usergroup-'+orgclass+':create').toLowerCase(); 
                def invparams = [ 
                    entity: data,  
                    securitygroups: securitygroups  
                ];
                
                openerObject = null;
                try { 
                    openerObject = InvokerUtil.lookupOpener(invtype, invparams); 
                } catch(Throwable t){
                    println 'failed to lookup opener '+invtype+' caused by '+ t.message; 
                } 
                
                if (openerObject == null) {
                    try { 
                        invtype = 'user-usergroup-orgclass:create';
                        openerObject = InvokerUtil.lookupOpener(invtype, invparams); 
                    } catch(Throwable t){
                        println 'failed to lookup opener '+invtype+' caused by '+ t.message; 
                    }                     
                } 
                
                if (openerObject == null) 
                    return null; 
                else 
                    return 'handlerpage';
            }             
            
            def doSubmit() {
                def data = selectedUsergroup;
                def params = [
                    securitygroupid: data.securitygroupid, 
                    usergroupid: data.objid, 
                    orgid: data.org?.objid, 
                    orgclass: data.orgclass, 
                    userid: entity.objid 
                ]; 
                svc.addSecuritygroup(params); 
                if (handler) handler(); 
                
                return '_close';
            } 
        }
    ]]>
    </code>
    
    <pages>
        <page template="com.rameses.admin.user.UsergroupMgmtPage"/>
        <page template="com.rameses.admin.user.UsergroupMgmtAddPage" name="addpage"/>
        <page template="com.rameses.admin.user.UsergroupMgmtHandlerPage" name="handlerpage"/>
    </pages>
</workunit>