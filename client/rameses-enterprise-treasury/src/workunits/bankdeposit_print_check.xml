<workunit>
    
   <invokers>
         <invoker type="bankdeposit:printcheck" caption="Bank Deposit" action="init" target="popup"/>
     </invokers>
   
   <code>
       <![CDATA[
        import com.rameses.osiris2.common.*;
        import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import java.rmi.server.*;
        import com.rameses.osiris2.client.*;
        import com.rameses.util.*;
        import com.rameses.osiris2.reports.*;
        
        class BankDepositPrintCheckController {
            
            @Binding
            def binding 
            
            @Service('BankService')
            def bankSvc
        
        
            def entity 
            def checks 
            def reportdata = [:]
            def reportname 
            def subreportname
            
            def totalcheck 
            
            @PropertyChangeListener
            def listener= [
                "entity.noofchecksperpage" : {o-> 
                    entity.frompage = 1
                    entity.topage = getTotalNoOfPages()
                    reportdata.pagecount = (Integer) getTotalNoOfPages();
                    binding.refresh("entity.frompage|entity.topage")
                },
                
                "deposittype" : {
                    reportdata.checks = []
                    if (deposittype != null){
                        reportdata.checks = checks.findAll{it.deposittype == deposittype }
                    }
                    numchecks = reportdata.checks.size();
                    listHandler.reload();
                    entity.frompage = 1
                    entity.topage = 1
                    reportdata.pagecount = 1;
                    binding.refresh("numchecks|entity.frompage|entity.topage");
                }
            ] 
            
            def init() {
                entity = [:]
                entity.printrange = "all" 
                numchecks  = 0 
            }
            
            def doOk() {
                if( entity.printrange == "range"){
                    if( entity.frompage < 1 || entity.frompage > entity.topage )
                        throw new Exception("Pages from is out of range. Please check.  ") 
                    
                    if( entity.topage < entity.frompage  )
                        throw new Exception("Pages from is out of range. Please check.  ")     
                
                    if( entity.topage > totalcheck ) entity.topage = totalcheck 
                } 
                
                def list = reportdata.checks.clone()
                def p = entity.frompage 
                for( int i=1; i <= entity.topage; i++) {
                    reportdata.noncashpayments = []
                    if( i != p) {
                        reportdata.noncashpayments.addAll( list[0..(entity.noofchecksperpage -1 )] )
                        list.removeAll( reportdata.noncashpayments );
                        continue;
                    } else if( list.size() >= entity.noofchecksperpage) {
                        reportdata.noncashpayments.addAll( list[0..(entity.noofchecksperpage -1 )] )
                    } else if( list.size() > 0) {
                        reportdata.noncashpayments.addAll( list )
                    }
                        
                    
                    MsgBox.alert("Insert check deposit slip.\n Printing page $i of ${reportdata.pagecount}. " )
                    reportdata.pagenumber = i;
                    report.viewReport() 
                    ReportUtil.print( report.report, true )
                    
                    list.removeAll( reportdata.noncashpayments )
                    p++ 
                }
            }
            
            def doCancel() { return "_close"}
            
            def getTotalNoOfPages( ) {
                if( entity.noofchecksperpage >= numchecks) return 1 
            
                def rem = entity.noofchecksperpage - ( numchecks.mod(entity.noofchecksperpage)  ) 
                return (numchecks + rem) / entity.noofchecksperpage
            }
            
            def report = [
                getReportName : { return reportname },
                getReportData : { return  reportdata }, 
                getSubReports : {
                    return [
                        new SubReport("checkbreakdownitem", subreportname )
                    ] as SubReport[]
                }
            ] as ReportModel
            
            
            def deposittype
            
            def getDeposittypes(){
                return bankSvc.getDepositTypes()
            }
            
            def numchecks
            
            def listHandler = [
                fetchList : { 
                    return reportdata.checks
                }
            ] as BasicListModel
        }      
       ]]>
   </code>
   
   <pages>
       <page template="com.rameses.enterprise.treasury.bankdeposit.BankDepositPrintCheckPage" />
   </pages>
   
</workunit>
