<workunit>
    
   <invokers>
         <invoker type="bankdeposit:create" caption="Bank Deposit" action="init" target="window"/>
         <invoker folderid="/menu/txn/treasury" caption="Bank Deposit" action="init" target="window" role="CASHIER" />
         <invoker type="quick_launcher" code="BNKD" caption="Bank Deposits" action="init" target="window" role="CASHIER"/>
         <invoker type="bankdeposit:open" caption="Bank Deposit (Open)" action="open" target="window"/>
         
         <invoker type="formActions" caption="Close" name="_close"  icon="images/toolbars/cancel.png" mnemonic="c" shortcut="ctrl C"/>
         <invoker type="formActions" caption="Next" name="start" visibleWhen="#{state == 'initial'}" mnemonic="n" shortcut="ctrl N" icon="images/toolbars/arrow_right.png"/>
         <invoker type="formActions" caption="Submit" name="submit" visibleWhen="#{state == 'processing'}" icon="images/toolbars/save.png" mnemonic="s" shortcut="ctrl S"/>
         
         
         <invoker type="formActions" caption="Reports" name="popupReports"   
            visibleWhen="#{mode == 'read' }" category="bankdeposit:reports" mnemonic="r"/>
     </invokers>
   
   <code>
       <![CDATA[
        import com.rameses.osiris2.common.*;
        import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import java.rmi.server.*;
        import com.rameses.osiris2.client.*;
        import com.rameses.util.*;
        import com.rameses.osiris2.reports.*;
        
        class BankDepositController {
        
            @Binding
            def binding;
        
            def state = "initial";
            
            @Service("BankDepositService")
            def service;
        
            @Service("NumberService")
            def numSvc; 
            
            String title = "New Bank Deposit (Initial)";
            def entity;
            
            def mode = 'create';
            
            boolean showSelected;
            
            def selectedFund;
            def selectedDeposit;
            
            def getExtActions() {
                return InvokerUtil.lookupActions( "bankdeposit:formActions", [entity:entity] );
            }
            
            def popupReports(def inv) {
                def popupMenu = new PopupMenuOpener();
                def list = InvokerUtil.lookupOpeners( inv.properties.category, [entity:entity] );
                list.each{
                    popupMenu.add( it );
                }
                return popupMenu;
            }
            
            def init() {
                state = "initial";
                entity = service.init();
                return "initial";
            }
            
            def start() {
                state = "processing";
                return "default";
            }
            
            def open(){
                state = 'open'
                mode = "read";
                title = 'Bank Deposit Summary'
                entity = service.open(entity);
                return 'view'
            }
            
            def liquidationListModel = [
                fetchList: { o->return entity.liquidations; }
            ] as BasicListModel;
            
            def fundSummaryModel = [
                fetchList: { o->return entity.fundsummaries; }
            ] as BasicListModel;
            
            def depositModel = [
                fetchList: { o->
                    if(showSelected) {
                        return entity.deposits.findAll{ it.fund?.objid == selectedFund?.fund?.objid };
                    }
                    return entity.deposits; 
                }
            ] as BasicListModel;
            
            
            def addDeposit() {
                if(!selectedFund || selectedFund.balance <= 0 ) 
                    throw new Exception("Please select a fund with a reminaing balance nto zero"); 
                return InvokerUtil.lookupOpener( "bankdeposit:entry", [
                    undepositedChecks: entity.undepositedChecks,
                    selectedFund: selectedFund,
                    handler: { o->
                        if( entity.deposits.find{ it.bankaccount.objid == o.bankaccount.objid } ) {
                            throw new Exception("Bank account already selected. Please choose another bank account");
                        }    
                        entity.deposits << o;
                        selectedFund.allocated += o.amount;
                        selectedFund.balance = selectedFund.amount - selectedFund.allocated;
                        fundSummaryModel.reload();    
                        depositModel.reload();
                    }
                ]);
            }
            
            
            def addDepositByBankAccount() {
                return InvokerUtil.lookupOpener( "bankdeposit:entrybybankacct", [
                    undepositedChecks: entity.undepositedChecks,
                    
                    fundSummaries    : entity.fundsummaries.findAll{it.balance != 0.0},
                    
                    handler: { o->
                        entity.deposits << o;
                        o.bankaccount.fundsummaries.each{ dfs -> 
                            def fs = entity.fundsummaries.find{it.fund.objid == dfs.fund.objid }
                            if (fs ){
                                fs.allocated = fs.balance;
                                fs.balance = 0;
                            }
                        }
                        fundSummaryModel.reload();    
                        depositModel.reload();
                    }
                ]);
            }
            
            
            def removeDeposit() {
                if(!selectedDeposit) return;
                //remove all checks also
                entity.deposits.remove( selectedDeposit );
                
                if (selectedDeposit.bankaccount ){
                    selectedDeposit.bankaccount.fundsummaries.each{ fs ->
                        def f= entity.fundsummaries.find{ it.fund.objid == fs.fund.objid };
                        f.allocated = 0.0 ;
                        f.balance = f.amount;
                    }
                }
                else{
                    def fund = entity.fundsummaries.find{ it.fund.objid == selectedDeposit.fund.objid };
                    fund.allocated -= selectedDeposit.amount;
                    fund.balance = fund.amount - fund.allocated;
                }
                
                selectedDeposit.checks.each {
                    entity.undepositedChecks.add( it );    
                }
                fundSummaryModel.reload();   
                depositModel.reload();
            }
            
            
            def submit() {
                if( entity.fundsummaries.find{ it.balance > 0 } )
                    throw new Exception("There should be no undeposited balance");
            
                if( MsgBox.confirm("You are about to submit this deposit. Please ensure the entries are correct")) {
                    entity = service.post( entity );
                    //service.post( entity );
                    state = "completed";
                    mode = "read";
                    MsgBox.alert("Posting successful");
                    return 'view';
                }
                return null;
            }
            
            def depositslippath = "com/rameses/enterprise/treasury/bankdeposit/"
            
            void printCashDepositSlip() {
                if( selectedDeposit.totalcash == 0.0 ) throw new Exception('There is no cash for deposit.')
            
                def reportname = depositslippath + "cash.jasper" 
                if( selectedDeposit.cashreport ) {
                    def file = depositslippath + selectedDeposit.cashreport + ".jasper"
                    URL u = getClass().getClassLoader().getResource(file);
                    if (u != null) reportname = file;
                }
                
                def reportdata = [
                    txndate: entity.dtposted, 
                    bankacctname: selectedDeposit.bankaccount.title, 
                    bankacctno: selectedDeposit.bankaccount.code, 
                    branchname :selectedDeposit.branchname,
                    depositedbyname: entity.cashier.name,
                    cash : selectedDeposit.totalcash,
                    denominations: selectedDeposit.cashbreakdown,
                    accttype : selectedDeposit.accttype,
                    amountinwords: numSvc.doubleToWords( selectedDeposit.totalcash ).toUpperCase()
                ]
                selectedDeposit.cashbreakdown.each {
                    def dqty = 'dqty' + it.caption.toString().replace('.00','')
                    def damt = 'damt' + it.caption.toString().replace('.00','')
                    reportdata."$dqty" = null
                    reportdata."$damt" = null
                    if( it.amount > 0 ) {
                        reportdata."$dqty" = it.qty
                        reportdata."$damt" = it.amount
                    }            
                }
                
                def report = [
                    getReportName : { return reportname },
                    getReportData : { return reportdata }
                ] as ReportModel
                report.viewReport()
                ReportUtil.print( report.report, true )
            }
            
            void printCashBreakdown() {
                if( selectedDeposit.totalcash == 0.0 ) throw new Exception('There is no cash for deposit.')
            
               def reportname = depositslippath + "cashbreakdownitem.jasper"
               if( selectedDeposit.cashbreakdownreport ) {
                    def file = depositslippath + selectedDeposit.cashbreakdownreport + ".jasper"
                    URL u = getClass().getClassLoader().getResource(file);
                    if (u != null) reportname = file;
                }
                
                def report = [
                    getReportName : { return reportname   },
                    getReportData : { return selectedDeposit.cashbreakdown }
                ] as ReportModel
                report.viewReport()
                ReportUtil.print( report.report, true )
            }
            
            def printCheckDepositSlip() {
                if(! selectedDeposit.checks ) throw new Exception("There are no checks for deposit.")
                
               def reportname = depositslippath + "check.jasper"
               if( selectedDeposit.checkreport ) {
                    def file = depositslippath + selectedDeposit.checkreport + ".jasper"
                    URL u = getClass().getClassLoader().getResource(file);
                    if (u != null) reportname = file; 
                }
                
                def subreportname = depositslippath + "checkbreakdownitem.jasper"
                println "selectedDeposit.checkbreakdownreport  -> " + selectedDeposit.checkbreakdownreport 
                if(  selectedDeposit.checkbreakdownreport ) {
                   def f = depositslippath + selectedDeposit.checkbreakdownreport + ".jasper"
                   URL ul = getClass().getClassLoader().getResource(f);
                   if( ul != null ) subreportname = f 
                }
                println "selectedDeposit.checkbreakdownreport  -> " + subreportname
                
                def reportdata = [
                    txndate: entity.dtposted, 
                    bankacctname: selectedDeposit.bankaccount.title, 
                    bankacctno: selectedDeposit.bankaccount.code, 
                    branchname :selectedDeposit.branchname,
                    depositedbyname: entity.cashier.name,
                    noncash : selectedDeposit.totalnoncash,
                    checks : selectedDeposit.checks,
                    checktype : selectedDeposit.accttype,
                    amountinwords: numSvc.doubleToWords( selectedDeposit.totalnoncash ).toUpperCase()
               ]
               return InvokerUtil.lookupOpener( "bankdeposit:printcheck" , [ reportdata: reportdata, reportname: reportname, subreportname:subreportname] ) 
               
            }
            
            
        }      
       ]]>
   </code>
   
   <pages>
       <page name="initial" template="com.rameses.enterprise.treasury.bankdeposit.BankDepositInitPage" />
       <page name="default" template="com.rameses.enterprise.treasury.bankdeposit.BankDepositProcessPage" />
       <page name="view" template="com.rameses.enterprise.treasury.bankdeposit.BankDepositViewPage" />
   </pages>
   
</workunit>
