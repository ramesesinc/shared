<workunit>
    
   <invokers>
         <invoker type="subcollector_remittance:create" caption="SubCollector Remittance" action="create" target="window"/>
         <invoker type="quick_launcher" code="SREM" caption="SubCollector  Remittance" action="create" target="window"/>
         <invoker type="subcollector_remittance:open" caption="SubCollector Remittance (Open)" action="open" target="window"/>
            
         <invoker type="formActions" caption="Close" name="_close" mnemonic="c" icon="images/toolbars/cancel.png" />
         <invoker type="formActions" caption="Submit" name="submit" visibleWhen="#{mode == 'create'}"/>
         <invoker type="formActions" caption="Reports" name="popupReports" visibleWhen="#{mode == 'read' }" category="subcollector-remittance:report" />
            
     </invokers>
   
   <code>
       <![CDATA[
        import com.rameses.osiris2.common.*;
        import com.rameses.rcp.common.*;
        import com.rameses.rcp.annotations.*;
        import java.rmi.server.*;
        import com.rameses.osiris2.client.*;
        import com.rameses.util.*;
        
        class SubCollectorRemittanceController {
            @Binding
            def binding
        
            @Service("SubCollectorRemittanceService")
            def service;
        
            def collectorList;
            def entity;    
            String title = "SubCollector Remittance";
            def mode =" create";
            def breakdown = 0.0;
            def total = 0.0;
            def cashBreakdownHandler;
            def cashbreakdown = []
            
            void create() {
                collectorList = service.getCollectorList();
                entity = [totalcash:0.0, totalnoncash:0.0, items:[]];
                entity.objid =  "SUBREM"+new UID();
                cashBreakdownHandler = InvokerUtil.lookupOpener("cash:breakdown", [
                    entries: cashbreakdown, onupdate: { o->
                        breakdown = o;
                        total = entity.totalnoncash+breakdown;
                        binding.refresh("breakdown");
                    }] );      
                mode = "create"
                
            }
            
            void open() {
                collectorList = [ entity.collector ]
                entity = service.open(entity);
                listModel.reload()
                cashbreakdown = entity.cashbreakdown
                cashBreakdownHandler = InvokerUtil.lookupOpener("cash:breakdown", [entries: cashbreakdown] );    
                total = entity.totalcash + entity.totalnoncash;
                breakdown = entity.cashbreakdown.sum{it.amount};
                mode = 'read'
            }
            
            @PropertyChangeListener
            def listener = [
                "entity.collector": { o->
                    loadCollectionRemittance();                    
                }
            ]
            
            void loadCollectionRemittance(){
                entity.putAll(service.getUremittedCollections(entity));
                listModel.reload();
            }
            
            def listModel = [
                fetchList: { o->
                    return entity.items;
                }
            ] as BasicListModel;
            
            
            
            void submit() {
                if( breakdown != entity.totalcash )
                    throw new Exception("Cash breakdown must equal total cash");
                if(MsgBox.confirm("You are about to remit this transaction. Proceed?")) {
                    entity.cashbreakdown = cashbreakdown
                    entity = service.post(entity);
                    MsgBox.alert("Remittance successful. Remittance no is " + entity.txnno );
                    mode='read'
                }
            }
            
            def viewCheckPayment() {
                if(! entity.collector) throw new Exception("Please select a collector.  ");
            
                return InvokerUtil.lookupOpener('subcollector_remittance:noncash', [mode:mode, remittanceid: entity.objid, collectorid:entity.collector.objid] )
            }
            
                        
            def popupReports(def inv) {
                def popupMenu = new PopupMenuOpener();
                def list = InvokerUtil.lookupOpeners( inv.properties.category, [entity:entity] );
                list.each{
                    popupMenu.add( it );
                }
                return popupMenu;
            }
        }      
       ]]>
   </code>
   
   <pages>
       <page  template="com.rameses.enterprise.treasury.remittance.SubCollectorRemittanceInitPage" />
   </pages>
   
</workunit>
