<workunit>
    <invokers>
        <invoker type="expression:editor" target="popup"/>
    </invokers>
    <code>
        <![CDATA[    

        import com.rameses.rcp.annotations.*
        import com.rameses.rcp.common.*
        import com.rameses.osiris2.client.*
        import com.rameses.osiris2.common.*
        import com.rameses.common.*;
        
        class ExpressionEditorController1 {        
        
            @Binding
            def binding;
            
            //Required fields to be injected by the XOpenerField
            def handler;                    //callback handler to be invoked
            def value;                      //current value
            def vars;                       //variables 
            
            def doCancel() {
                return "_close";
            }
            
            def doOk() 
            {
                //publish the modified value
                if (handler) handler(value); 
                return '_close';
            }   
            
            def selectedNode;
            def selectedItem;
            
            def tree = [
                getRootNode : { 
                    return [caption:'Root'];
                },

                fetchNodes : { o->
                    if(o.item?.group == "func") {
                        return [
                            [caption:'Logical', leaf:true, item:[group:'func', type:'logical']],
                            [caption:'String', leaf:true, item:[group:'func', type:'string']],
                            [caption:'Number', leaf:true, item:[group:'func', type:'number']],
                        ];
                    }
                    else if(o.item?.group == "var") {
                        return [
                            [caption:'String', leaf:true, item:[group:'var', type:'string']],
                            [caption:'Number', leaf:true, item:[group:'var', type:'number']],
                            [caption:'Date', leaf:true, item:[group:'var', type:'date']],
                            [caption:'Other', leaf:true, item:[group:'var', type:'other']],
                        ];
                    }
                    else {
                        return [
                            [caption:'Variables', item:[group:'var']],
                            [caption:'Functions', item:[group:'func']],
                        ];
                    }
                },
            ] as TreeNodeModel;   
            
            def getListItems() {
                def z = selectedNode.item;
                if( z?.group == "var" && z.type ) {
                    return vars?.findAll{ 
                        if( z.type == "string") {
                            return it.datatype == "string";
                        }
                        else if(z.type=="number") {
                            return it.datatype?.matches( "decimal|integer" );
                        }
                        else if(z.type=="date") {
                            return it.datatype == "date";
                        }
                        else {
                            //return all datatypes not classified in any of the ff.
                            return !it.datatype?.matches( "decimal|integer|string|date" );
                        }
                    }.collect{ [caption:it.name, signature:it.name, description: '('+it.datatype + ')' ]  };
                }
                else if(z?.group == 'func' && z.type) {
                    return FunctionResolver.instance.getFunctionsByGroup(z.type);
                }
            }
            
            void addText() {
                textHandler.insertText( selectedItem.signature );
                textHandler.requestFocus();
            }
            
            def textHandler = new TextDocumentModel();
            
        }
        
        ]]>
        
    </code>
    
    <pages>
        <page template="com.rameses.osiris2.common.ui.ExpressionEditor"/>
    </pages>
    
</workunit>