PHASES.drl
============

package bplassessment.rules.phases;
import com.rameses.rules.common.*;
import java.util.*;
#--------------------------------------------------------------------------
# RULE PHASES
#---------------------------------------------------------------------------
rule "start-phase"
	auto-focus
	salience 100
	no-loop
	then
		System.out.println("Staring info");
		drools.setFocus("INFO");
end

rule "end-info"
   agenda-group "INFO"
   salience -100
   no-loop
   when
	  not CancelExecution()
   then
	  drools.setFocus("AFTER-INFO");
end

rule "after-info"
   agenda-group "AFTER-INFO"
   salience -100
   no-loop
   when
	  not CancelExecution()
   then
      drools.setFocus("BT");
end

rule "bt"
   agenda-group "BT"
   salience -100
   no-loop
   when
	  not CancelExecution()
   then
     drools.setFocus("AFTER-BT");
end


rule "after-bt"
   agenda-group "AFTER-BT"
   salience -100
   no-loop
   when
	  not CancelExecution()   
   then
     drools.setFocus("RF");
end

rule "rf"
   agenda-group "RF"
   salience -100
   no-loop
   when
	  not CancelExecution()   
   then
     drools.setFocus("AFTER-RF");
end

rule "after-rf"
   agenda-group "AFTER-RF"
   salience -100
   no-loop
   when
	  not CancelExecution()   
   then
     drools.setFocus("OC");
end

rule "OC"
   agenda-group "OC"
   salience -100
   no-loop
   when
	  not CancelExecution()   
   then
     drools.setFocus("AFTER-OC");
end

rule "AFTER-OC"
   agenda-group "AFTER-OC"
   salience -100
   no-loop
   when
	  not CancelExecution()   
   then
     drools.setFocus("SUMMARY");
end

===========
SYSTEM DRL
===========

#--------------------------------------------------------------------------
# after executing the info phase, we will find first if there are
# app infos that need 
# this asserts the non-system infos for processing into the next phase.
#
#--------------------------------------------------------------------------
rule "summarize-app-info"
	agenda-group "INFO"
	no-loop
	when
		app: Application()
		not CancelExecution()
	then	
		System.out.println( "summarization process");
		//summarize system infos
		FactGroup[] grps = infoList.groupBy( "tag", "#{completed==true && (!!tag) }" );
		for(int i=0; i<grps.length; i++) {
			FactGroup fg = grps[i];
			AppInfo af = new AppInfo();
			af.setApplication(app);
			af.setVarname(fg.getKey("tag")+"");
			af.setDatatype( fg.getFirstItem().getDataValue("datatype")+"");
			af.setDecimalValue( fg.sumDouble("decimalValue") );
			af.setIntValue( fg.sumInt("intValue"));
			af.setSystem(true);
			af.setCompleted(true);
			infoList.add( af, drools.getRule().getName() );
		}
		if( infoList.exists("#{completed == false}")) {
			insert(new CancelExecution());
		}
		else {
			Iterator iter = infoList.iterator();
			while(iter.hasNext()) {
				FactItem fi = (FactItem)iter.next();
				insert( fi.getData() );	
			}
		}		
end



#--------------------------------------------------------------------------
# this asserts all business taxes facts and summarized by acctype. 
# we also need to determine the heirarchical position of the items
#--------------------------------------------------------------------------
rule "assert-tax-fees"
	no-loop
	agenda-group "assert-taxfee"	
	when
		LogicalFact( name: name, tag == "assert-taxfee" )
	then
		System.out.println( "asserting taxfees " + name );
		FactList list = taxFeeList.findAll( "#{accttype == '" + name + "'}" );
		int lastPos = (list.size() - 1);
		if( lastPos >=0 ) {
			int i = 0;
			list.sort( "amtdue" );
			Iterator iter = list.iterator();
			while(iter.hasNext()) {
				TaxFee tf = (TaxFee)((FactItem)iter.next()).getData();
				//we set only if lastpos not equal to 0 or more than 1 item
				if( lastPos > 0 ) {
					if( i == 0 ) tf.setPosition("low");
					else if(i == lastPos) tf.setPosition("high");
					else tf.setPosition("mid");
					i++;
				}
				insert(tf);	
			}
		}
end


rule "summarize-tax-fees"
	no-loop
	agenda-group "summarize-taxfee"	
	when
		LogicalFact( name: name, tag == "summarize-taxfee" )
	then
		System.out.println( "summx taxfees " );
		FactList list = taxFeeList.findAll( "#{accttype == '" + name + "'}" );
		TaxFeeSummary tfs = new TaxFeeSummary();
		tfs.setAccttype( name );
		tfs.setAmount( list.sumDouble("amtdue") );
		insert( tfs );		
end



