<workunit>
    <invokers>
        <invoker type="conditionhandler:basic" action="init"/>
    </invokers>
    <code>
         <![CDATA[    

        import com.rameses.rcp.annotations.*
        import com.rameses.rcp.common.*
        import com.rameses.osiris2.client.*
        import com.rameses.osiris2.common.*
        import com.rameses.rules.helpers.*;
        
        class BasicConditionHandler {
        
            @Binding
            def binding;
        
            //caller-supplied variables
            def rule;
            def condition; 
            def fact;   
            def varList;
            def constraint;
            def saveHandler;
            
            def selectedConstraint;
            def selectedField;
            def selectedConstraintStatus;
            def constraintMode = "add";
            
            @PropertyChangeListener
            def propChange = [
                "selectedField": { o->
                    constraint.fieldname = o.name;
                    constraint.datatype = o.datatype;
                    constraint.operator = null;
                    if(o?.usevar) constraint.usevar = true;
                    if(o?.datatype == "dynamic") constraint.usevar = false;
                },
                "constraint.operator": { o->
                    constraint.value = null;
                    constraint.valueText = null;
                }
            ];
            
            void init() {
                initNewConstraint();
            }

            //constraint utilities
            def getFields() {
                return fact.fields;
            }
            
            def getOperators() {
                return OperatorList.getOperator( constraint, selectedField );
            }
            
            def getValueHandler() {
                if(!constraint.operator) return null;
                String usetype = constraint.datatype;
                if( constraint.usevar == true ) {
                    return new Opener(outcome:"var");
                }
                else if( usetype.matches("decimal|integer|string") ) {
                    return new Opener(outcome:usetype);
                }
                else {
                    String opener = "object";
                    if(usetype.startsWith("lov")) opener = "lov";
                    else if(usetype=="dynamic") opener = "dynamic";
                    return InvokerUtil.lookupOpener( "conditionvaluehandler:"+opener, [
                        constraint: constraint,
                        fieldDef: selectedField
                    ]);
                }
            }
            
            def getUseVarList() {
                return varList.findAll{ it.datatype == selectedField.datatype }
            }
            
            //function for constraints
            void initNewConstraint() {
                selectedField = null;
                constraintMode = "add";
                constraint = [:]
            }
            
            void addConstraint() {
               ConditionUtil.validate(constraint);        
               constraint.displaytext = ConditionUtil.buildText( constraint );
               condition.constraints << constraint;
               initNewConstraint();
            }
            
            void editConstraint() {
                constraintMode = "edit";
                selectedField = fact.fields.find{ it.name == selectedConstraint.fieldname };
                constraint.clear();    
                constraint.putAll(selectedConstraint);
            }
            
            void updateConstraint() {
                ConditionUtil.validate(constraint);        
                constraint.displaytext = ConditionUtil.buildText( constraint );
                selectedConstraint.clear();
                selectedConstraint.putAll( constraint );
                initNewConstraint();
            }
            
            void removeConstraint() {
                condition.constraints -= [selectedConstraint];
            }

            
            def doCancel() {
                if(MsgBox.confirm('Discard changes?')) {
                    return "_close:_close";
                }
            }
            
            def doOk() {
                if( constraintMode == "edit" ) {
                    throw new Exception("You have uncommitted changes in the constraint. Please click Update or Cancel button" );
                }
                condition.displaytext = RuleUtil.buildText( condition );
                saveHandler( condition );
                return "_close:_close";
            }
        }
        
        ]]>
        
    </code>
    
    <pages>
        <page name="default" template="com.rameses.rules.ui.RuleConditionPage"/>
        
        <page name="decimal" template="com.rameses.rules.constraints.ui.DecimalHandler"/>
        <page name="integer" template="com.rameses.rules.constraints.ui.IntegerHandler"/>
        <page name="string" template="com.rameses.rules.constraints.ui.StringHandler"/>
        <page name="var" template="com.rameses.rules.constraints.ui.VarListHandler"/>
        
    </pages>
    
</workunit>